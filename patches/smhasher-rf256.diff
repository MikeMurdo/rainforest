*** CMakeLists.txt
--- CMakeLists.txt
***************
*** 155,161 ****
    set(64ONLY_SRC
      xxhash.c metrohash64.cpp metrohash128.cpp farmhash.cc
      FarmTest.cc farmhash-c.c farmhash-c-test.cc cmetrohash64.c
!     opt_cmetrohash64_1.c fasthash.cpp)
  ENDIF()
  
  add_library(
--- 155,161 ----
    set(64ONLY_SRC
      xxhash.c metrohash64.cpp metrohash128.cpp farmhash.cc
      FarmTest.cc farmhash-c.c farmhash-c-test.cc cmetrohash64.c
!     opt_cmetrohash64_1.c fasthash.cpp rainforest.c aes2r.c)
  ENDIF()
  
  add_library(
*** Hashes.cpp
--- Hashes.cpp
***************
*** 374,379 ****
--- 374,390 ----
    uint32_t	  crc32c(const void *input, int len, uint32_t seed);
    uint64_t	  crc64c_hw(const void *input, int len, uint32_t seed);
  #endif
+   void		  rf256_hash2(void *out, const void *input, int len, uint32_t seed);
+ }
+ 
+ void
+ rainforest_test(const void *input, int len, uint32_t seed, void *out)
+ {
+   if (!len) {
+     *(uint32_t *) out = 0;
+     return;
+   }
+   rf256_hash2(out, input, len, seed);
  }
  
  #ifdef __SSE2__
*** Hashes.h
--- Hashes.h
***************
*** 46,51 ****
--- 46,52 ----
  void bcrypt_64a            ( const void * key, int len, uint32_t seed, void * out );
  void scrypt_64a            ( const void * key, int len, uint32_t seed, void * out );
  #endif
+ void rainforest_test       ( const void * key, int len, uint32_t seed, void * out );
  
  //----------
  // General purpose hashes
*** README.md
--- README.md
***************
*** 59,64 ****
--- 59,65 ----
  | [farmhash32_c](doc/farmhash32_c)      |     24647.21  |    25.36 |                            |
  | [farmhash64_c](doc/farmhash64_c)     	|      9149.44	|    74.39 |                            |
  | [farmhash128_c](doc/farmhash128_c)    |      9959.95	|    99.01 |                            |
+ | [rf256](doc/rf256)                    |         4.39	| 35602.07 | very slow, for mining only |
  | [xxHash32](doc/xxHash32)              |      5414.57	|    46.85 | collisions with 4bit diff  |
  | [xxHash64](doc/xxHash64)              |     10288.36	|    58.79 |                            |
  | [Spooky32](doc/Spooky32)              |      9899.74	|    68.10 |                            |
*** aes2r.c
--- aes2r.c
***************
*** 0 ****
--- 1,201 ----
+ #include <stdint.h>
+ 
+ // Two round implementation optimized for x86_64+AES-NI and ARMv8+crypto
+ // extensions. Test pattern :
+ //
+ // Plaintext:
+ // 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
+ //
+ // Ciphertext (encryption result):
+ // 0x16, 0xcd, 0xb8, 0x7a, 0xc6, 0xae, 0xdb, 0x19, 0xe9, 0x32, 0x47, 0x85, 0x39, 0x51, 0x24, 0xe6
+ //
+ // Plaintext (decryption result):
+ // 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
+ 
+ /* Rijndael's substitution box for sub_bytes step */
+ static uint8_t SBOX[256] = {
+      0x63, 0x7c, 0x77, 0x7b, 0xf2, 0x6b, 0x6f, 0xc5, 0x30, 0x01, 0x67, 0x2b, 0xfe, 0xd7, 0xab, 0x76,
+      0xca, 0x82, 0xc9, 0x7d, 0xfa, 0x59, 0x47, 0xf0, 0xad, 0xd4, 0xa2, 0xaf, 0x9c, 0xa4, 0x72, 0xc0,
+      0xb7, 0xfd, 0x93, 0x26, 0x36, 0x3f, 0xf7, 0xcc, 0x34, 0xa5, 0xe5, 0xf1, 0x71, 0xd8, 0x31, 0x15,
+      0x04, 0xc7, 0x23, 0xc3, 0x18, 0x96, 0x05, 0x9a, 0x07, 0x12, 0x80, 0xe2, 0xeb, 0x27, 0xb2, 0x75,
+      0x09, 0x83, 0x2c, 0x1a, 0x1b, 0x6e, 0x5a, 0xa0, 0x52, 0x3b, 0xd6, 0xb3, 0x29, 0xe3, 0x2f, 0x84,
+      0x53, 0xd1, 0x00, 0xed, 0x20, 0xfc, 0xb1, 0x5b, 0x6a, 0xcb, 0xbe, 0x39, 0x4a, 0x4c, 0x58, 0xcf,
+      0xd0, 0xef, 0xaa, 0xfb, 0x43, 0x4d, 0x33, 0x85, 0x45, 0xf9, 0x02, 0x7f, 0x50, 0x3c, 0x9f, 0xa8,
+      0x51, 0xa3, 0x40, 0x8f, 0x92, 0x9d, 0x38, 0xf5, 0xbc, 0xb6, 0xda, 0x21, 0x10, 0xff, 0xf3, 0xd2,
+      0xcd, 0x0c, 0x13, 0xec, 0x5f, 0x97, 0x44, 0x17, 0xc4, 0xa7, 0x7e, 0x3d, 0x64, 0x5d, 0x19, 0x73,
+      0x60, 0x81, 0x4f, 0xdc, 0x22, 0x2a, 0x90, 0x88, 0x46, 0xee, 0xb8, 0x14, 0xde, 0x5e, 0x0b, 0xdb,
+      0xe0, 0x32, 0x3a, 0x0a, 0x49, 0x06, 0x24, 0x5c, 0xc2, 0xd3, 0xac, 0x62, 0x91, 0x95, 0xe4, 0x79,
+      0xe7, 0xc8, 0x37, 0x6d, 0x8d, 0xd5, 0x4e, 0xa9, 0x6c, 0x56, 0xf4, 0xea, 0x65, 0x7a, 0xae, 0x08,
+      0xba, 0x78, 0x25, 0x2e, 0x1c, 0xa6, 0xb4, 0xc6, 0xe8, 0xdd, 0x74, 0x1f, 0x4b, 0xbd, 0x8b, 0x8a,
+      0x70, 0x3e, 0xb5, 0x66, 0x48, 0x03, 0xf6, 0x0e, 0x61, 0x35, 0x57, 0xb9, 0x86, 0xc1, 0x1d, 0x9e,
+      0xe1, 0xf8, 0x98, 0x11, 0x69, 0xd9, 0x8e, 0x94, 0x9b, 0x1e, 0x87, 0xe9, 0xce, 0x55, 0x28, 0xdf,
+      0x8c, 0xa1, 0x89, 0x0d, 0xbf, 0xe6, 0x42, 0x68, 0x41, 0x99, 0x2d, 0x0f, 0xb0, 0x54, 0xbb, 0x16
+ };
+ 
+ /*--- The parts below are not used when crypto extensions are available ---*/
+ /* Use -march=armv8-a+crypto on ARMv8 to use crypto extensions */
+ /* Use -maes on x86_64 to use AES-NI */
+ #if (!defined(__aarch64__) || !defined(__ARM_FEATURE_CRYPTO)) && (!defined(__x86_64__) || !defined(__AES__))
+ 
+ /* shifts to do for shift_rows step */
+ static uint8_t shifts[16] = {
+      0,  5, 10, 15,
+      4,  9, 14,  3,
+      8, 13,  2,  7,
+     12,  1,  6, 11
+ };
+ 
+ /* add the round key to the state with simple XOR operation */
+ static void add_round_key(uint8_t * state, uint8_t * rkey) {
+     uint8_t i;
+     for (i = 0; i < 16; i++)
+         state[i] ^= rkey[i];
+ }
+ 
+ /* substitute all bytes using Rijndael's substitution box */
+ static void sub_bytes(uint8_t * state) {
+     uint8_t i;
+     for (i = 0; i < 16; i++)
+         state[i] = SBOX[state[i]];
+ }
+ 
+ /* imagine the state not as 1-dimensional, but a 4x4 grid;
+  * this step shifts the rows of this grid around */
+ static void shift_rows(uint8_t * state) {
+     uint8_t temp[16];
+     uint8_t i;
+ 
+     for (i = 0; i < 16; i++) {
+         temp[i] = state[shifts[i]];
+     }
+ 
+     for (i = 0; i < 16; i++) {
+         state[i] = temp[i];
+     }
+ }
+ 
+ /* mix columns */
+ static void mix_columns(uint8_t * state) {
+     uint8_t a[4];
+     uint8_t b[4];
+     uint8_t h, i, k;
+ 
+     for (k = 0; k < 4; k++) {
+         for (i = 0; i < 4; i++) {
+             a[i] = state[i + 4 * k];
+             h = state[i + 4 * k] & 0x80; /* hi bit */
+             b[i] = state[i + 4 * k] << 1;
+ 
+             if (h == 0x80) {
+                 b[i] ^= 0x1b; /* Rijndael's Galois field */
+             }
+         }
+ 
+         state[4 * k]     = b[0] ^ a[3] ^ a[2] ^ b[1] ^ a[1];
+         state[1 + 4 * k] = b[1] ^ a[0] ^ a[3] ^ b[2] ^ a[2];
+         state[2 + 4 * k] = b[2] ^ a[1] ^ a[0] ^ b[3] ^ a[3];
+         state[3 + 4 * k] = b[3] ^ a[2] ^ a[1] ^ b[0] ^ a[0];
+     }
+ }
+ #endif // (!defined(__aarch64__) || !defined(__ARM_FEATURE_CRYPTO)) && (!defined(__x86_64__) || !defined(__AES__))
+ 
+ 
+ /* key schedule stuff */
+ 
+ /* simple function to rotate 4 byte array */
+ static inline uint32_t rotate32(uint32_t in) {
+ #if defined(__BYTE_ORDER__) && defined(__ORDER_LITTLE_ENDIAN__) && __BYTE_ORDER__ == __ORDER_LITTLE_ENDIAN__
+     in = (in >> 8) | (in << 24);
+ #elif defined(__BYTE_ORDER__) && defined(__ORDER_BIG_ENDIAN__) && __BYTE_ORDER__ == __ORDER_BIG_ENDIAN__
+     in = (in << 8) | (in >> 24);
+ #else
+     uint8_t *b = (uint8_t *)&in, temp = b[0];
+     b[0] = b[1]; b[1] = b[2]; b[2] = b[3]; b[3] = temp;
+ #endif
+     return in;
+ }
+ 
+ /* key schedule core operation */
+ static inline uint32_t sbox(uint32_t in, uint8_t n) {
+ 	in = (SBOX[in & 255]) | (SBOX[(in >> 8) & 255] << 8) | (SBOX[(in >> 16) & 255] << 16) | (SBOX[(in >> 24) & 255] << 24);
+ #if defined(__BYTE_ORDER__) && defined(__ORDER_LITTLE_ENDIAN__) && __BYTE_ORDER__ == __ORDER_LITTLE_ENDIAN__
+ 	in ^= n;
+ #elif defined(__BYTE_ORDER__) && defined(__ORDER_BIG_ENDIAN__) && __BYTE_ORDER__ == __ORDER_BIG_ENDIAN__
+ 	in ^= n << 24;
+ #else
+ 	*(uint8_t *)&in ^= n;
+ #endif
+ 	return in;
+ }
+ 
+ // this version is optimized for exactly two rounds.
+ // _state_ must be 16-byte aligned.
+ void aes2r_encrypt(uint8_t * state, uint8_t * key) {
+     uint32_t key_schedule[12] __attribute__((aligned(16)));
+     uint32_t t;
+ 
+     /* initialize key schedule; its first 16 bytes are the key */
+     key_schedule[0] = ((uint32_t *)key)[0];
+     key_schedule[1] = ((uint32_t *)key)[1];
+     key_schedule[2] = ((uint32_t *)key)[2];
+     key_schedule[3] = ((uint32_t *)key)[3];
+     t = key_schedule[3];
+ 
+     t = rotate32(t);
+     t = sbox(t, 1);
+     t = key_schedule[4]  = key_schedule[0] ^ t;
+     t = key_schedule[5]  = key_schedule[1] ^ t;
+     t = key_schedule[6]  = key_schedule[2] ^ t;
+     t = key_schedule[7]  = key_schedule[3] ^ t;
+ 
+     t = rotate32(t);
+     t = sbox(t, 2);
+     t = key_schedule[8]  = key_schedule[4] ^ t;
+     t = key_schedule[9]  = key_schedule[5] ^ t;
+     t = key_schedule[10] = key_schedule[6] ^ t;
+     t = key_schedule[11] = key_schedule[7] ^ t;
+ 
+ // Use -march=armv8-a+crypto+crc to get this one
+ #if defined(__aarch64__) && defined(__ARM_FEATURE_CRYPTO)
+     __asm__ volatile(
+         "ld1   {v0.16b},[%0]        \n"
+ 	"ld1   {v1.16b,v2.16b,v3.16b},[%1]  \n"
+ 	"aese  v0.16b,v1.16b        \n" // round1: add_round_key,sub_bytes,shift_rows
+ 	"aesmc v0.16b,v0.16b        \n" // round1: mix_columns
+ 	"aese  v0.16b,v2.16b        \n" // round2: add_round_key,sub_bytes,shift_rows
+ 	"eor   v0.16b,v0.16b,v3.16b \n" // finish: add_round_key
+ 	"st1   {v0.16b},[%0]        \n"
+ 	: /* only output is in *state */
+ 	: "r"(state), "r"(key_schedule)
+ 	: "v0", "v1", "v2", "v3", "cc", "memory");
+ 
+ // Use -maes to get this one
+ #elif defined(__x86_64__) && defined(__AES__)
+     __asm__ volatile(
+         "movups (%0),  %%xmm0     \n"
+ 	"movups (%1),  %%xmm1     \n"
+ 	"pxor   %%xmm1,%%xmm0     \n" // add_round_key(state, key_schedule)
+ 	"movups 16(%1),%%xmm2     \n"
+ 	"movups 32(%1),%%xmm1     \n"
+ 	"aesenc %%xmm2,%%xmm0     \n" // first round
+ 	"aesenclast %%xmm1,%%xmm0 \n" // final round
+ 	"movups %%xmm0, (%0)  \n"
+ 	: /* only output is in *state */
+ 	: "r"(state), "r" (key_schedule)
+ 	: "xmm0", "xmm1", "xmm2", "cc", "memory");
+ 
+ #else
+     /* first round of the algorithm */
+     add_round_key(state, (void*)&key_schedule[0]);
+     sub_bytes(state);
+     shift_rows(state);
+     mix_columns(state);
+     add_round_key(state, (void*)&key_schedule[4]);
+ 
+     /* final round of the algorithm */
+     sub_bytes(state);
+     shift_rows(state);
+     add_round_key(state, (void*)&key_schedule[8]);
+ 
+ #endif
+ }
*** doc/rf256
--- doc/rf256
***************
*** 0 ****
--- 1,1240 ----
+ -------------------------------------------------------------------------------
+ --- Testing rf256 "RainForest, 256-bit"
+ 
+ [[[ Sanity Tests ]]]
+ 
+ Verification value 0xDAB2034F : PASS
+ Running sanity check 1    ..........PASS
+ Running AppendedZeroesTest..........PASS
+ 
+ 
+ Input vcode 0x00000001, Output vcode 0x00000001, Result vcode 0x00000001
+ Verification value is 0x00000001 - Testing took 2460.662586 seconds
+ -------------------------------------------------------------------------------
+ 
+ real	41m0.639s
+ user	41m0.672s
+ sys	0m0.000s
+ -------------------------------------------------------------------------------
+ --- Testing rf256 "RainForest, 256-bit"
+ 
+ [[[ Speed Tests ]]]
+ 
+ Bulk speed test - 262144-byte keys
+ Alignment  7 -  0.002 bytes/cycle -    4.39 MiB/sec @ 3 ghz
+ Alignment  6 -  0.002 bytes/cycle -    4.39 MiB/sec @ 3 ghz
+ Alignment  5 -  0.002 bytes/cycle -    4.39 MiB/sec @ 3 ghz
+ Alignment  4 -  0.002 bytes/cycle -    4.39 MiB/sec @ 3 ghz
+ Alignment  3 -  0.002 bytes/cycle -    4.39 MiB/sec @ 3 ghz
+ Alignment  2 -  0.002 bytes/cycle -    4.39 MiB/sec @ 3 ghz
+ Alignment  1 -  0.002 bytes/cycle -    4.39 MiB/sec @ 3 ghz
+ Alignment  0 -  0.002 bytes/cycle -    4.39 MiB/sec @ 3 ghz
+ Average      -  0.002 bytes/cycle -    4.39 MiB/sec @ 3 ghz
+ 
+ Small key speed test -    1-byte keys - 36069.19 cycles/hash
+ Small key speed test -    2-byte keys - 36134.36 cycles/hash
+ Small key speed test -    3-byte keys - 36194.42 cycles/hash
+ Small key speed test -    4-byte keys - 33652.41 cycles/hash
+ Small key speed test -    5-byte keys - 36063.34 cycles/hash
+ Small key speed test -    6-byte keys - 36134.30 cycles/hash
+ Small key speed test -    7-byte keys - 36190.66 cycles/hash
+ Small key speed test -    8-byte keys - 33646.63 cycles/hash
+ Small key speed test -    9-byte keys - 36083.05 cycles/hash
+ Small key speed test -   10-byte keys - 36142.76 cycles/hash
+ Small key speed test -   11-byte keys - 36196.98 cycles/hash
+ Small key speed test -   12-byte keys - 33645.85 cycles/hash
+ Small key speed test -   13-byte keys - 36094.94 cycles/hash
+ Small key speed test -   14-byte keys - 36153.84 cycles/hash
+ Small key speed test -   15-byte keys - 36203.72 cycles/hash
+ Small key speed test -   16-byte keys - 33660.93 cycles/hash
+ Small key speed test -   17-byte keys - 36131.08 cycles/hash
+ Small key speed test -   18-byte keys - 36180.20 cycles/hash
+ Small key speed test -   19-byte keys - 36229.21 cycles/hash
+ Small key speed test -   20-byte keys - 33647.75 cycles/hash
+ Small key speed test -   21-byte keys - 36131.63 cycles/hash
+ Small key speed test -   22-byte keys - 36176.29 cycles/hash
+ Small key speed test -   23-byte keys - 36233.32 cycles/hash
+ Small key speed test -   24-byte keys - 33665.68 cycles/hash
+ Small key speed test -   25-byte keys - 36155.48 cycles/hash
+ Small key speed test -   26-byte keys - 36214.81 cycles/hash
+ Small key speed test -   27-byte keys - 36260.99 cycles/hash
+ Small key speed test -   28-byte keys - 33679.14 cycles/hash
+ Small key speed test -   29-byte keys - 36196.15 cycles/hash
+ Small key speed test -   30-byte keys - 36229.85 cycles/hash
+ Small key speed test -   31-byte keys - 36265.08 cycles/hash
+ Average                                    35602.066 cycles/hash
+ 
+ 
+ Input vcode 0x00000001, Output vcode 0x00000001, Result vcode 0x00000001
+ Verification value is 0x00000001 - Testing took 6667.877948 seconds
+ -------------------------------------------------------------------------------
+ 
+ real	111m7.819s
+ user	111m7.876s
+ sys	0m0.016s
+ -------------------------------------------------------------------------------
+ --- Testing rf256 "RainForest, 256-bit"
+ 
+ [[[ Differential Tests ]]]
+ 
+ Testing 8303632 up-to-5-bit differentials in 64-bit keys -> 256 bit hashes.
+ 1000 reps, 8303632000 total tests, expecting 0.00 random collisions..........
+ 0 total collisions, of which 0 single collisions were ignored
+ 
+ Testing 11017632 up-to-4-bit differentials in 128-bit keys -> 256 bit hashes.
+ 1000 reps, 11017632000 total tests, expecting 0.00 random collisions..........
+ 0 total collisions, of which 0 single collisions were ignored
+ 
+ Testing 2796416 up-to-3-bit differentials in 256-bit keys -> 256 bit hashes.
+ 1000 reps, 2796416000 total tests, expecting 0.00 random collisions..........
+ 0 total collisions, of which 0 single collisions were ignored
+ 
+ 
+ 
+ Input vcode 0x00000001, Output vcode 0x00000001, Result vcode 0x00000001
+ Verification value is 0x00000001 - Testing took 180773.205158 seconds
+ -------------------------------------------------------------------------------
+ 
+ real	3012m51.383s
+ user	3012m52.776s
+ sys	0m0.440s
+ -------------------------------------------------------------------------------
+ --- Testing rf256 "RainForest, 256-bit"
+ 
+ [[[ Avalanche Tests ]]]
+ 
+ Testing  32-bit keys -> 256-bit hashes,   300000 reps.......... worst bias is 0.693333%
+ Testing  40-bit keys -> 256-bit hashes,   300000 reps.......... worst bias is 0.684000%
+ Testing  48-bit keys -> 256-bit hashes,   300000 reps.......... worst bias is 0.722667%
+ Testing  56-bit keys -> 256-bit hashes,   300000 reps.......... worst bias is 0.732000%
+ Testing  64-bit keys -> 256-bit hashes,   300000 reps.......... worst bias is 0.687333%
+ Testing  72-bit keys -> 256-bit hashes,   300000 reps.......... worst bias is 0.715333%
+ Testing  80-bit keys -> 256-bit hashes,   300000 reps.......... worst bias is 0.734667%
+ Testing  88-bit keys -> 256-bit hashes,   300000 reps.......... worst bias is 0.800000%
+ Testing  96-bit keys -> 256-bit hashes,   300000 reps.......... worst bias is 0.784667%
+ Testing 104-bit keys -> 256-bit hashes,   300000 reps.......... worst bias is 0.820000%
+ Testing 112-bit keys -> 256-bit hashes,   300000 reps.......... worst bias is 0.768000%
+ Testing 120-bit keys -> 256-bit hashes,   300000 reps.......... worst bias is 0.760000%
+ Testing 128-bit keys -> 256-bit hashes,   300000 reps.......... worst bias is 0.836667%
+ Testing 136-bit keys -> 256-bit hashes,   300000 reps.......... worst bias is 0.770000%
+ Testing 144-bit keys -> 256-bit hashes,   300000 reps.......... worst bias is 0.766667%
+ Testing 152-bit keys -> 256-bit hashes,   300000 reps.......... worst bias is 0.758667%
+ 
+ 
+ Input vcode 0x00000001, Output vcode 0x00000001, Result vcode 0x00000001
+ Verification value is 0x00000001 - Testing took 4150.886045 seconds
+ -------------------------------------------------------------------------------
+ 
+ real	69m10.849s
+ user	69m10.880s
+ sys	0m0.012s
+ -------------------------------------------------------------------------------
+ --- Testing rf256 "RainForest, 256-bit"
+ 
+ [[[ Keyset 'Cyclic' Tests ]]]
+ 
+ Keyset 'Cyclic' - 8 cycles of 32 bytes - 10000000 keys
+ Testing collisions   - Expected     0.00, actual     0.00 ( 0.00x)
+ Testing distribution - Worst bias is the  20-bit window at bit 155 - 0.044%
+ 
+ Keyset 'Cyclic' - 8 cycles of 33 bytes - 10000000 keys
+ Testing collisions   - Expected     0.00, actual     0.00 ( 0.00x)
+ Testing distribution - Worst bias is the  20-bit window at bit 114 - 0.038%
+ 
+ Keyset 'Cyclic' - 8 cycles of 34 bytes - 10000000 keys
+ Testing collisions   - Expected     0.00, actual     0.00 ( 0.00x)
+ Testing distribution - Worst bias is the  20-bit window at bit  65 - 0.041%
+ 
+ Keyset 'Cyclic' - 8 cycles of 35 bytes - 10000000 keys
+ Testing collisions   - Expected     0.00, actual     0.00 ( 0.00x)
+ Testing distribution - Worst bias is the  20-bit window at bit 181 - 0.041%
+ 
+ Keyset 'Cyclic' - 8 cycles of 36 bytes - 10000000 keys
+ Testing collisions   - Expected     0.00, actual     0.00 ( 0.00x)
+ Testing distribution - Worst bias is the  20-bit window at bit 167 - 0.035%
+ 
+ 
+ 
+ Input vcode 0x00000001, Output vcode 0x00000001, Result vcode 0x00000001
+ Verification value is 0x00000001 - Testing took 2563.091293 seconds
+ -------------------------------------------------------------------------------
+ 
+ real	42m43.068s
+ user	42m42.928s
+ sys	0m0.172s
+ -------------------------------------------------------------------------------
+ --- Testing rf256 "RainForest, 256-bit"
+ 
+ [[[ Keyset 'TwoBytes' Tests ]]]
+ 
+ Keyset 'TwoBytes' - up-to-4-byte keys, 652545 total keys
+ Testing collisions   - Expected     0.00, actual     0.00 ( 0.00x)
+ Testing distribution - Worst bias is the  16-bit window at bit 163 - 0.129%
+ 
+ Keyset 'TwoBytes' - up-to-8-byte keys, 5471025 total keys
+ Testing collisions   - Expected     0.00, actual     0.00 ( 0.00x)
+ Testing distribution - Worst bias is the  20-bit window at bit 135 - 0.060%
+ 
+ Keyset 'TwoBytes' - up-to-12-byte keys, 18616785 total keys
+ Testing collisions   - Expected     0.00, actual     0.00 ( 0.00x)
+ Testing distribution - Worst bias is the  20-bit window at bit 177 - 0.015%
+ 
+ Keyset 'TwoBytes' - up-to-16-byte keys, 44251425 total keys
+ Testing collisions   - Expected     0.00, actual     0.00 ( 0.00x)
+ Testing distribution - Worst bias is the  20-bit window at bit  24 - 0.008%
+ 
+ Keyset 'TwoBytes' - up-to-20-byte keys, 86536545 total keys
+ Testing collisions   - Expected     0.00, actual     0.00 ( 0.00x)
+ Testing distribution - Worst bias is the  20-bit window at bit  60 - 0.005%
+ 
+ 
+ 
+ Input vcode 0x00000001, Output vcode 0x00000001, Result vcode 0x00000001
+ Verification value is 0x00000001 - Testing took 1849.764567 seconds
+ -------------------------------------------------------------------------------
+ 
+ real	30m49.788s
+ user	30m48.940s
+ sys	0m0.832s
+ -------------------------------------------------------------------------------
+ --- Testing rf256 "RainForest, 256-bit"
+ 
+ [[[ Keyset 'Sparse' Tests ]]]
+ 
+ Keyset 'Sparse' - 32-bit keys with up to 6 bits set - 1149017 keys
+ Testing collisions   - Expected     0.00, actual     0.00 ( 0.00x)
+ Testing distribution - Worst bias is the  17-bit window at bit 212 - 0.113%
+ 
+ Keyset 'Sparse' - 40-bit keys with up to 6 bits set - 4598479 keys
+ Testing collisions   - Expected     0.00, actual     0.00 ( 0.00x)
+ Testing distribution - Worst bias is the  19-bit window at bit 207 - 0.054%
+ 
+ Keyset 'Sparse' - 48-bit keys with up to 5 bits set - 1925357 keys
+ Testing collisions   - Expected     0.00, actual     0.00 ( 0.00x)
+ Testing distribution - Worst bias is the  18-bit window at bit  12 - 0.111%
+ 
+ Keyset 'Sparse' - 56-bit keys with up to 5 bits set - 4216423 keys
+ Testing collisions   - Expected     0.00, actual     0.00 ( 0.00x)
+ Testing distribution - Worst bias is the  19-bit window at bit 174 - 0.097%
+ 
+ Keyset 'Sparse' - 64-bit keys with up to 5 bits set - 8303633 keys
+ Testing collisions   - Expected     0.00, actual     0.00 ( 0.00x)
+ Testing distribution - Worst bias is the  20-bit window at bit 147 - 0.051%
+ 
+ Keyset 'Sparse' - 96-bit keys with up to 4 bits set - 3469497 keys
+ Testing collisions   - Expected     0.00, actual     0.00 ( 0.00x)
+ Testing distribution - Worst bias is the  19-bit window at bit  10 - 0.081%
+ 
+ Keyset 'Sparse' - 256-bit keys with up to 3 bits set - 2796417 keys
+ Testing collisions   - Expected     0.00, actual     0.00 ( 0.00x)
+ Testing distribution - Worst bias is the  19-bit window at bit 239 - 0.256%
+ 
+ Keyset 'Sparse' - 2048-bit keys with up to 2 bits set - 2098177 keys
+ Testing collisions   - Expected     0.00, actual     0.00 ( 0.00x)
+ Testing distribution - Worst bias is the  18-bit window at bit 195 - 0.102%
+ 
+ 
+ 
+ Input vcode 0x00000001, Output vcode 0x00000001, Result vcode 0x00000001
+ Verification value is 0x00000001 - Testing took 406.063011 seconds
+ -------------------------------------------------------------------------------
+ 
+ real	6m46.073s
+ user	6m45.740s
+ sys	0m0.332s
+ -------------------------------------------------------------------------------
+ --- Testing rf256 "RainForest, 256-bit"
+ 
+ [[[ Keyset 'Combination Lowbits' Tests ]]]
+ 
+ Keyset 'Combination' - up to 8 blocks from a set of 8 - 19173960 keys
+ Testing collisions   - Expected     0.00, actual     0.00 ( 0.00x)
+ Testing distribution - Worst bias is the  20-bit window at bit 236 - 0.036%
+ 
+ 
+ [[[ Keyset 'Combination Highbits' Tests ]]]
+ 
+ Keyset 'Combination' - up to 8 blocks from a set of 8 - 19173960 keys
+ Testing collisions   - Expected     0.00, actual     0.00 ( 0.00x)
+ Testing distribution - Worst bias is the  18-bit window at bit 227 - 0.020%
+ 
+ 
+ [[[ Keyset 'Combination 0x8000000' Tests ]]]
+ 
+ Keyset 'Combination' - up to 20 blocks from a set of 2 - 2097150 keys
+ Testing collisions   - Expected     0.00, actual     0.00 ( 0.00x)
+ Testing distribution - Worst bias is the  18-bit window at bit 235 - 0.100%
+ 
+ 
+ [[[ Keyset 'Combination 0x0000001' Tests ]]]
+ 
+ Keyset 'Combination' - up to 20 blocks from a set of 2 - 2097150 keys
+ Testing collisions   - Expected     0.00, actual     0.00 ( 0.00x)
+ Testing distribution - Worst bias is the  18-bit window at bit 234 - 0.115%
+ 
+ 
+ [[[ Keyset 'Combination Hi-Lo' Tests ]]]
+ 
+ Keyset 'Combination' - up to 6 blocks from a set of 15 - 12204240 keys
+ Testing collisions   - Expected     0.00, actual     0.00 ( 0.00x)
+ Testing distribution - Worst bias is the  20-bit window at bit 253 - 0.043%
+ 
+ 
+ 
+ Input vcode 0x00000001, Output vcode 0x00000001, Result vcode 0x00000001
+ Verification value is 0x00000001 - Testing took 644.035283 seconds
+ -------------------------------------------------------------------------------
+ 
+ real	10m44.063s
+ user	10m43.556s
+ sys	0m0.488s
+ -------------------------------------------------------------------------------
+ --- Testing rf256 "RainForest, 256-bit"
+ 
+ [[[ Keyset 'Window' Tests ]]]
+ 
+ Keyset 'Windowed' - 512-bit key,  20-bit window - 512 tests, 1048576 keys per test
+ Window at   0 - Testing collisions   - Expected     0.00, actual     0.00 ( 0.00x)
+ Window at   1 - Testing collisions   - Expected     0.00, actual     0.00 ( 0.00x)
+ Window at   2 - Testing collisions   - Expected     0.00, actual     0.00 ( 0.00x)
+ Window at   3 - Testing collisions   - Expected     0.00, actual     0.00 ( 0.00x)
+ Window at   4 - Testing collisions   - Expected     0.00, actual     0.00 ( 0.00x)
+ Window at   5 - Testing collisions   - Expected     0.00, actual     0.00 ( 0.00x)
+ Window at   6 - Testing collisions   - Expected     0.00, actual     0.00 ( 0.00x)
+ Window at   7 - Testing collisions   - Expected     0.00, actual     0.00 ( 0.00x)
+ Window at   8 - Testing collisions   - Expected     0.00, actual     0.00 ( 0.00x)
+ Window at   9 - Testing collisions   - Expected     0.00, actual     0.00 ( 0.00x)
+ Window at  10 - Testing collisions   - Expected     0.00, actual     0.00 ( 0.00x)
+ Window at  11 - Testing collisions   - Expected     0.00, actual     0.00 ( 0.00x)
+ Window at  12 - Testing collisions   - Expected     0.00, actual     0.00 ( 0.00x)
+ Window at  13 - Testing collisions   - Expected     0.00, actual     0.00 ( 0.00x)
+ Window at  14 - Testing collisions   - Expected     0.00, actual     0.00 ( 0.00x)
+ Window at  15 - Testing collisions   - Expected     0.00, actual     0.00 ( 0.00x)
+ Window at  16 - Testing collisions   - Expected     0.00, actual     0.00 ( 0.00x)
+ Window at  17 - Testing collisions   - Expected     0.00, actual     0.00 ( 0.00x)
+ Window at  18 - Testing collisions   - Expected     0.00, actual     0.00 ( 0.00x)
+ Window at  19 - Testing collisions   - Expected     0.00, actual     0.00 ( 0.00x)
+ Window at  20 - Testing collisions   - Expected     0.00, actual     0.00 ( 0.00x)
+ Window at  21 - Testing collisions   - Expected     0.00, actual     0.00 ( 0.00x)
+ Window at  22 - Testing collisions   - Expected     0.00, actual     0.00 ( 0.00x)
+ Window at  23 - Testing collisions   - Expected     0.00, actual     0.00 ( 0.00x)
+ Window at  24 - Testing collisions   - Expected     0.00, actual     0.00 ( 0.00x)
+ Window at  25 - Testing collisions   - Expected     0.00, actual     0.00 ( 0.00x)
+ Window at  26 - Testing collisions   - Expected     0.00, actual     0.00 ( 0.00x)
+ Window at  27 - Testing collisions   - Expected     0.00, actual     0.00 ( 0.00x)
+ Window at  28 - Testing collisions   - Expected     0.00, actual     0.00 ( 0.00x)
+ Window at  29 - Testing collisions   - Expected     0.00, actual     0.00 ( 0.00x)
+ Window at  30 - Testing collisions   - Expected     0.00, actual     0.00 ( 0.00x)
+ Window at  31 - Testing collisions   - Expected     0.00, actual     0.00 ( 0.00x)
+ Window at  32 - Testing collisions   - Expected     0.00, actual     0.00 ( 0.00x)
+ Window at  33 - Testing collisions   - Expected     0.00, actual     0.00 ( 0.00x)
+ Window at  34 - Testing collisions   - Expected     0.00, actual     0.00 ( 0.00x)
+ Window at  35 - Testing collisions   - Expected     0.00, actual     0.00 ( 0.00x)
+ Window at  36 - Testing collisions   - Expected     0.00, actual     0.00 ( 0.00x)
+ Window at  37 - Testing collisions   - Expected     0.00, actual     0.00 ( 0.00x)
+ Window at  38 - Testing collisions   - Expected     0.00, actual     0.00 ( 0.00x)
+ Window at  39 - Testing collisions   - Expected     0.00, actual     0.00 ( 0.00x)
+ Window at  40 - Testing collisions   - Expected     0.00, actual     0.00 ( 0.00x)
+ Window at  41 - Testing collisions   - Expected     0.00, actual     0.00 ( 0.00x)
+ Window at  42 - Testing collisions   - Expected     0.00, actual     0.00 ( 0.00x)
+ Window at  43 - Testing collisions   - Expected     0.00, actual     0.00 ( 0.00x)
+ Window at  44 - Testing collisions   - Expected     0.00, actual     0.00 ( 0.00x)
+ Window at  45 - Testing collisions   - Expected     0.00, actual     0.00 ( 0.00x)
+ Window at  46 - Testing collisions   - Expected     0.00, actual     0.00 ( 0.00x)
+ Window at  47 - Testing collisions   - Expected     0.00, actual     0.00 ( 0.00x)
+ Window at  48 - Testing collisions   - Expected     0.00, actual     0.00 ( 0.00x)
+ Window at  49 - Testing collisions   - Expected     0.00, actual     0.00 ( 0.00x)
+ Window at  50 - Testing collisions   - Expected     0.00, actual     0.00 ( 0.00x)
+ Window at  51 - Testing collisions   - Expected     0.00, actual     0.00 ( 0.00x)
+ Window at  52 - Testing collisions   - Expected     0.00, actual     0.00 ( 0.00x)
+ Window at  53 - Testing collisions   - Expected     0.00, actual     0.00 ( 0.00x)
+ Window at  54 - Testing collisions   - Expected     0.00, actual     0.00 ( 0.00x)
+ Window at  55 - Testing collisions   - Expected     0.00, actual     0.00 ( 0.00x)
+ Window at  56 - Testing collisions   - Expected     0.00, actual     0.00 ( 0.00x)
+ Window at  57 - Testing collisions   - Expected     0.00, actual     0.00 ( 0.00x)
+ Window at  58 - Testing collisions   - Expected     0.00, actual     0.00 ( 0.00x)
+ Window at  59 - Testing collisions   - Expected     0.00, actual     0.00 ( 0.00x)
+ Window at  60 - Testing collisions   - Expected     0.00, actual     0.00 ( 0.00x)
+ Window at  61 - Testing collisions   - Expected     0.00, actual     0.00 ( 0.00x)
+ Window at  62 - Testing collisions   - Expected     0.00, actual     0.00 ( 0.00x)
+ Window at  63 - Testing collisions   - Expected     0.00, actual     0.00 ( 0.00x)
+ Window at  64 - Testing collisions   - Expected     0.00, actual     0.00 ( 0.00x)
+ Window at  65 - Testing collisions   - Expected     0.00, actual     0.00 ( 0.00x)
+ Window at  66 - Testing collisions   - Expected     0.00, actual     0.00 ( 0.00x)
+ Window at  67 - Testing collisions   - Expected     0.00, actual     0.00 ( 0.00x)
+ Window at  68 - Testing collisions   - Expected     0.00, actual     0.00 ( 0.00x)
+ Window at  69 - Testing collisions   - Expected     0.00, actual     0.00 ( 0.00x)
+ Window at  70 - Testing collisions   - Expected     0.00, actual     0.00 ( 0.00x)
+ Window at  71 - Testing collisions   - Expected     0.00, actual     0.00 ( 0.00x)
+ Window at  72 - Testing collisions   - Expected     0.00, actual     0.00 ( 0.00x)
+ Window at  73 - Testing collisions   - Expected     0.00, actual     0.00 ( 0.00x)
+ Window at  74 - Testing collisions   - Expected     0.00, actual     0.00 ( 0.00x)
+ Window at  75 - Testing collisions   - Expected     0.00, actual     0.00 ( 0.00x)
+ Window at  76 - Testing collisions   - Expected     0.00, actual     0.00 ( 0.00x)
+ Window at  77 - Testing collisions   - Expected     0.00, actual     0.00 ( 0.00x)
+ Window at  78 - Testing collisions   - Expected     0.00, actual     0.00 ( 0.00x)
+ Window at  79 - Testing collisions   - Expected     0.00, actual     0.00 ( 0.00x)
+ Window at  80 - Testing collisions   - Expected     0.00, actual     0.00 ( 0.00x)
+ Window at  81 - Testing collisions   - Expected     0.00, actual     0.00 ( 0.00x)
+ Window at  82 - Testing collisions   - Expected     0.00, actual     0.00 ( 0.00x)
+ Window at  83 - Testing collisions   - Expected     0.00, actual     0.00 ( 0.00x)
+ Window at  84 - Testing collisions   - Expected     0.00, actual     0.00 ( 0.00x)
+ Window at  85 - Testing collisions   - Expected     0.00, actual     0.00 ( 0.00x)
+ Window at  86 - Testing collisions   - Expected     0.00, actual     0.00 ( 0.00x)
+ Window at  87 - Testing collisions   - Expected     0.00, actual     0.00 ( 0.00x)
+ Window at  88 - Testing collisions   - Expected     0.00, actual     0.00 ( 0.00x)
+ Window at  89 - Testing collisions   - Expected     0.00, actual     0.00 ( 0.00x)
+ Window at  90 - Testing collisions   - Expected     0.00, actual     0.00 ( 0.00x)
+ Window at  91 - Testing collisions   - Expected     0.00, actual     0.00 ( 0.00x)
+ Window at  92 - Testing collisions   - Expected     0.00, actual     0.00 ( 0.00x)
+ Window at  93 - Testing collisions   - Expected     0.00, actual     0.00 ( 0.00x)
+ Window at  94 - Testing collisions   - Expected     0.00, actual     0.00 ( 0.00x)
+ Window at  95 - Testing collisions   - Expected     0.00, actual     0.00 ( 0.00x)
+ Window at  96 - Testing collisions   - Expected     0.00, actual     0.00 ( 0.00x)
+ Window at  97 - Testing collisions   - Expected     0.00, actual     0.00 ( 0.00x)
+ Window at  98 - Testing collisions   - Expected     0.00, actual     0.00 ( 0.00x)
+ Window at  99 - Testing collisions   - Expected     0.00, actual     0.00 ( 0.00x)
+ Window at 100 - Testing collisions   - Expected     0.00, actual     0.00 ( 0.00x)
+ Window at 101 - Testing collisions   - Expected     0.00, actual     0.00 ( 0.00x)
+ Window at 102 - Testing collisions   - Expected     0.00, actual     0.00 ( 0.00x)
+ Window at 103 - Testing collisions   - Expected     0.00, actual     0.00 ( 0.00x)
+ Window at 104 - Testing collisions   - Expected     0.00, actual     0.00 ( 0.00x)
+ Window at 105 - Testing collisions   - Expected     0.00, actual     0.00 ( 0.00x)
+ Window at 106 - Testing collisions   - Expected     0.00, actual     0.00 ( 0.00x)
+ Window at 107 - Testing collisions   - Expected     0.00, actual     0.00 ( 0.00x)
+ Window at 108 - Testing collisions   - Expected     0.00, actual     0.00 ( 0.00x)
+ Window at 109 - Testing collisions   - Expected     0.00, actual     0.00 ( 0.00x)
+ Window at 110 - Testing collisions   - Expected     0.00, actual     0.00 ( 0.00x)
+ Window at 111 - Testing collisions   - Expected     0.00, actual     0.00 ( 0.00x)
+ Window at 112 - Testing collisions   - Expected     0.00, actual     0.00 ( 0.00x)
+ Window at 113 - Testing collisions   - Expected     0.00, actual     0.00 ( 0.00x)
+ Window at 114 - Testing collisions   - Expected     0.00, actual     0.00 ( 0.00x)
+ Window at 115 - Testing collisions   - Expected     0.00, actual     0.00 ( 0.00x)
+ Window at 116 - Testing collisions   - Expected     0.00, actual     0.00 ( 0.00x)
+ Window at 117 - Testing collisions   - Expected     0.00, actual     0.00 ( 0.00x)
+ Window at 118 - Testing collisions   - Expected     0.00, actual     0.00 ( 0.00x)
+ Window at 119 - Testing collisions   - Expected     0.00, actual     0.00 ( 0.00x)
+ Window at 120 - Testing collisions   - Expected     0.00, actual     0.00 ( 0.00x)
+ Window at 121 - Testing collisions   - Expected     0.00, actual     0.00 ( 0.00x)
+ Window at 122 - Testing collisions   - Expected     0.00, actual     0.00 ( 0.00x)
+ Window at 123 - Testing collisions   - Expected     0.00, actual     0.00 ( 0.00x)
+ Window at 124 - Testing collisions   - Expected     0.00, actual     0.00 ( 0.00x)
+ Window at 125 - Testing collisions   - Expected     0.00, actual     0.00 ( 0.00x)
+ Window at 126 - Testing collisions   - Expected     0.00, actual     0.00 ( 0.00x)
+ Window at 127 - Testing collisions   - Expected     0.00, actual     0.00 ( 0.00x)
+ Window at 128 - Testing collisions   - Expected     0.00, actual     0.00 ( 0.00x)
+ Window at 129 - Testing collisions   - Expected     0.00, actual     0.00 ( 0.00x)
+ Window at 130 - Testing collisions   - Expected     0.00, actual     0.00 ( 0.00x)
+ Window at 131 - Testing collisions   - Expected     0.00, actual     0.00 ( 0.00x)
+ Window at 132 - Testing collisions   - Expected     0.00, actual     0.00 ( 0.00x)
+ Window at 133 - Testing collisions   - Expected     0.00, actual     0.00 ( 0.00x)
+ Window at 134 - Testing collisions   - Expected     0.00, actual     0.00 ( 0.00x)
+ Window at 135 - Testing collisions   - Expected     0.00, actual     0.00 ( 0.00x)
+ Window at 136 - Testing collisions   - Expected     0.00, actual     0.00 ( 0.00x)
+ Window at 137 - Testing collisions   - Expected     0.00, actual     0.00 ( 0.00x)
+ Window at 138 - Testing collisions   - Expected     0.00, actual     0.00 ( 0.00x)
+ Window at 139 - Testing collisions   - Expected     0.00, actual     0.00 ( 0.00x)
+ Window at 140 - Testing collisions   - Expected     0.00, actual     0.00 ( 0.00x)
+ Window at 141 - Testing collisions   - Expected     0.00, actual     0.00 ( 0.00x)
+ Window at 142 - Testing collisions   - Expected     0.00, actual     0.00 ( 0.00x)
+ Window at 143 - Testing collisions   - Expected     0.00, actual     0.00 ( 0.00x)
+ Window at 144 - Testing collisions   - Expected     0.00, actual     0.00 ( 0.00x)
+ Window at 145 - Testing collisions   - Expected     0.00, actual     0.00 ( 0.00x)
+ Window at 146 - Testing collisions   - Expected     0.00, actual     0.00 ( 0.00x)
+ Window at 147 - Testing collisions   - Expected     0.00, actual     0.00 ( 0.00x)
+ Window at 148 - Testing collisions   - Expected     0.00, actual     0.00 ( 0.00x)
+ Window at 149 - Testing collisions   - Expected     0.00, actual     0.00 ( 0.00x)
+ Window at 150 - Testing collisions   - Expected     0.00, actual     0.00 ( 0.00x)
+ Window at 151 - Testing collisions   - Expected     0.00, actual     0.00 ( 0.00x)
+ Window at 152 - Testing collisions   - Expected     0.00, actual     0.00 ( 0.00x)
+ Window at 153 - Testing collisions   - Expected     0.00, actual     0.00 ( 0.00x)
+ Window at 154 - Testing collisions   - Expected     0.00, actual     0.00 ( 0.00x)
+ Window at 155 - Testing collisions   - Expected     0.00, actual     0.00 ( 0.00x)
+ Window at 156 - Testing collisions   - Expected     0.00, actual     0.00 ( 0.00x)
+ Window at 157 - Testing collisions   - Expected     0.00, actual     0.00 ( 0.00x)
+ Window at 158 - Testing collisions   - Expected     0.00, actual     0.00 ( 0.00x)
+ Window at 159 - Testing collisions   - Expected     0.00, actual     0.00 ( 0.00x)
+ Window at 160 - Testing collisions   - Expected     0.00, actual     0.00 ( 0.00x)
+ Window at 161 - Testing collisions   - Expected     0.00, actual     0.00 ( 0.00x)
+ Window at 162 - Testing collisions   - Expected     0.00, actual     0.00 ( 0.00x)
+ Window at 163 - Testing collisions   - Expected     0.00, actual     0.00 ( 0.00x)
+ Window at 164 - Testing collisions   - Expected     0.00, actual     0.00 ( 0.00x)
+ Window at 165 - Testing collisions   - Expected     0.00, actual     0.00 ( 0.00x)
+ Window at 166 - Testing collisions   - Expected     0.00, actual     0.00 ( 0.00x)
+ Window at 167 - Testing collisions   - Expected     0.00, actual     0.00 ( 0.00x)
+ Window at 168 - Testing collisions   - Expected     0.00, actual     0.00 ( 0.00x)
+ Window at 169 - Testing collisions   - Expected     0.00, actual     0.00 ( 0.00x)
+ Window at 170 - Testing collisions   - Expected     0.00, actual     0.00 ( 0.00x)
+ Window at 171 - Testing collisions   - Expected     0.00, actual     0.00 ( 0.00x)
+ Window at 172 - Testing collisions   - Expected     0.00, actual     0.00 ( 0.00x)
+ Window at 173 - Testing collisions   - Expected     0.00, actual     0.00 ( 0.00x)
+ Window at 174 - Testing collisions   - Expected     0.00, actual     0.00 ( 0.00x)
+ Window at 175 - Testing collisions   - Expected     0.00, actual     0.00 ( 0.00x)
+ Window at 176 - Testing collisions   - Expected     0.00, actual     0.00 ( 0.00x)
+ Window at 177 - Testing collisions   - Expected     0.00, actual     0.00 ( 0.00x)
+ Window at 178 - Testing collisions   - Expected     0.00, actual     0.00 ( 0.00x)
+ Window at 179 - Testing collisions   - Expected     0.00, actual     0.00 ( 0.00x)
+ Window at 180 - Testing collisions   - Expected     0.00, actual     0.00 ( 0.00x)
+ Window at 181 - Testing collisions   - Expected     0.00, actual     0.00 ( 0.00x)
+ Window at 182 - Testing collisions   - Expected     0.00, actual     0.00 ( 0.00x)
+ Window at 183 - Testing collisions   - Expected     0.00, actual     0.00 ( 0.00x)
+ Window at 184 - Testing collisions   - Expected     0.00, actual     0.00 ( 0.00x)
+ Window at 185 - Testing collisions   - Expected     0.00, actual     0.00 ( 0.00x)
+ Window at 186 - Testing collisions   - Expected     0.00, actual     0.00 ( 0.00x)
+ Window at 187 - Testing collisions   - Expected     0.00, actual     0.00 ( 0.00x)
+ Window at 188 - Testing collisions   - Expected     0.00, actual     0.00 ( 0.00x)
+ Window at 189 - Testing collisions   - Expected     0.00, actual     0.00 ( 0.00x)
+ Window at 190 - Testing collisions   - Expected     0.00, actual     0.00 ( 0.00x)
+ Window at 191 - Testing collisions   - Expected     0.00, actual     0.00 ( 0.00x)
+ Window at 192 - Testing collisions   - Expected     0.00, actual     0.00 ( 0.00x)
+ Window at 193 - Testing collisions   - Expected     0.00, actual     0.00 ( 0.00x)
+ Window at 194 - Testing collisions   - Expected     0.00, actual     0.00 ( 0.00x)
+ Window at 195 - Testing collisions   - Expected     0.00, actual     0.00 ( 0.00x)
+ Window at 196 - Testing collisions   - Expected     0.00, actual     0.00 ( 0.00x)
+ Window at 197 - Testing collisions   - Expected     0.00, actual     0.00 ( 0.00x)
+ Window at 198 - Testing collisions   - Expected     0.00, actual     0.00 ( 0.00x)
+ Window at 199 - Testing collisions   - Expected     0.00, actual     0.00 ( 0.00x)
+ Window at 200 - Testing collisions   - Expected     0.00, actual     0.00 ( 0.00x)
+ Window at 201 - Testing collisions   - Expected     0.00, actual     0.00 ( 0.00x)
+ Window at 202 - Testing collisions   - Expected     0.00, actual     0.00 ( 0.00x)
+ Window at 203 - Testing collisions   - Expected     0.00, actual     0.00 ( 0.00x)
+ Window at 204 - Testing collisions   - Expected     0.00, actual     0.00 ( 0.00x)
+ Window at 205 - Testing collisions   - Expected     0.00, actual     0.00 ( 0.00x)
+ Window at 206 - Testing collisions   - Expected     0.00, actual     0.00 ( 0.00x)
+ Window at 207 - Testing collisions   - Expected     0.00, actual     0.00 ( 0.00x)
+ Window at 208 - Testing collisions   - Expected     0.00, actual     0.00 ( 0.00x)
+ Window at 209 - Testing collisions   - Expected     0.00, actual     0.00 ( 0.00x)
+ Window at 210 - Testing collisions   - Expected     0.00, actual     0.00 ( 0.00x)
+ Window at 211 - Testing collisions   - Expected     0.00, actual     0.00 ( 0.00x)
+ Window at 212 - Testing collisions   - Expected     0.00, actual     0.00 ( 0.00x)
+ Window at 213 - Testing collisions   - Expected     0.00, actual     0.00 ( 0.00x)
+ Window at 214 - Testing collisions   - Expected     0.00, actual     0.00 ( 0.00x)
+ Window at 215 - Testing collisions   - Expected     0.00, actual     0.00 ( 0.00x)
+ Window at 216 - Testing collisions   - Expected     0.00, actual     0.00 ( 0.00x)
+ Window at 217 - Testing collisions   - Expected     0.00, actual     0.00 ( 0.00x)
+ Window at 218 - Testing collisions   - Expected     0.00, actual     0.00 ( 0.00x)
+ Window at 219 - Testing collisions   - Expected     0.00, actual     0.00 ( 0.00x)
+ Window at 220 - Testing collisions   - Expected     0.00, actual     0.00 ( 0.00x)
+ Window at 221 - Testing collisions   - Expected     0.00, actual     0.00 ( 0.00x)
+ Window at 222 - Testing collisions   - Expected     0.00, actual     0.00 ( 0.00x)
+ Window at 223 - Testing collisions   - Expected     0.00, actual     0.00 ( 0.00x)
+ Window at 224 - Testing collisions   - Expected     0.00, actual     0.00 ( 0.00x)
+ Window at 225 - Testing collisions   - Expected     0.00, actual     0.00 ( 0.00x)
+ Window at 226 - Testing collisions   - Expected     0.00, actual     0.00 ( 0.00x)
+ Window at 227 - Testing collisions   - Expected     0.00, actual     0.00 ( 0.00x)
+ Window at 228 - Testing collisions   - Expected     0.00, actual     0.00 ( 0.00x)
+ Window at 229 - Testing collisions   - Expected     0.00, actual     0.00 ( 0.00x)
+ Window at 230 - Testing collisions   - Expected     0.00, actual     0.00 ( 0.00x)
+ Window at 231 - Testing collisions   - Expected     0.00, actual     0.00 ( 0.00x)
+ Window at 232 - Testing collisions   - Expected     0.00, actual     0.00 ( 0.00x)
+ Window at 233 - Testing collisions   - Expected     0.00, actual     0.00 ( 0.00x)
+ Window at 234 - Testing collisions   - Expected     0.00, actual     0.00 ( 0.00x)
+ Window at 235 - Testing collisions   - Expected     0.00, actual     0.00 ( 0.00x)
+ Window at 236 - Testing collisions   - Expected     0.00, actual     0.00 ( 0.00x)
+ Window at 237 - Testing collisions   - Expected     0.00, actual     0.00 ( 0.00x)
+ Window at 238 - Testing collisions   - Expected     0.00, actual     0.00 ( 0.00x)
+ Window at 239 - Testing collisions   - Expected     0.00, actual     0.00 ( 0.00x)
+ Window at 240 - Testing collisions   - Expected     0.00, actual     0.00 ( 0.00x)
+ Window at 241 - Testing collisions   - Expected     0.00, actual     0.00 ( 0.00x)
+ Window at 242 - Testing collisions   - Expected     0.00, actual     0.00 ( 0.00x)
+ Window at 243 - Testing collisions   - Expected     0.00, actual     0.00 ( 0.00x)
+ Window at 244 - Testing collisions   - Expected     0.00, actual     0.00 ( 0.00x)
+ Window at 245 - Testing collisions   - Expected     0.00, actual     0.00 ( 0.00x)
+ Window at 246 - Testing collisions   - Expected     0.00, actual     0.00 ( 0.00x)
+ Window at 247 - Testing collisions   - Expected     0.00, actual     0.00 ( 0.00x)
+ Window at 248 - Testing collisions   - Expected     0.00, actual     0.00 ( 0.00x)
+ Window at 249 - Testing collisions   - Expected     0.00, actual     0.00 ( 0.00x)
+ Window at 250 - Testing collisions   - Expected     0.00, actual     0.00 ( 0.00x)
+ Window at 251 - Testing collisions   - Expected     0.00, actual     0.00 ( 0.00x)
+ Window at 252 - Testing collisions   - Expected     0.00, actual     0.00 ( 0.00x)
+ Window at 253 - Testing collisions   - Expected     0.00, actual     0.00 ( 0.00x)
+ Window at 254 - Testing collisions   - Expected     0.00, actual     0.00 ( 0.00x)
+ Window at 255 - Testing collisions   - Expected     0.00, actual     0.00 ( 0.00x)
+ Window at 256 - Testing collisions   - Expected     0.00, actual     0.00 ( 0.00x)
+ Window at 257 - Testing collisions   - Expected     0.00, actual     0.00 ( 0.00x)
+ Window at 258 - Testing collisions   - Expected     0.00, actual     0.00 ( 0.00x)
+ Window at 259 - Testing collisions   - Expected     0.00, actual     0.00 ( 0.00x)
+ Window at 260 - Testing collisions   - Expected     0.00, actual     0.00 ( 0.00x)
+ Window at 261 - Testing collisions   - Expected     0.00, actual     0.00 ( 0.00x)
+ Window at 262 - Testing collisions   - Expected     0.00, actual     0.00 ( 0.00x)
+ Window at 263 - Testing collisions   - Expected     0.00, actual     0.00 ( 0.00x)
+ Window at 264 - Testing collisions   - Expected     0.00, actual     0.00 ( 0.00x)
+ Window at 265 - Testing collisions   - Expected     0.00, actual     0.00 ( 0.00x)
+ Window at 266 - Testing collisions   - Expected     0.00, actual     0.00 ( 0.00x)
+ Window at 267 - Testing collisions   - Expected     0.00, actual     0.00 ( 0.00x)
+ Window at 268 - Testing collisions   - Expected     0.00, actual     0.00 ( 0.00x)
+ Window at 269 - Testing collisions   - Expected     0.00, actual     0.00 ( 0.00x)
+ Window at 270 - Testing collisions   - Expected     0.00, actual     0.00 ( 0.00x)
+ Window at 271 - Testing collisions   - Expected     0.00, actual     0.00 ( 0.00x)
+ Window at 272 - Testing collisions   - Expected     0.00, actual     0.00 ( 0.00x)
+ Window at 273 - Testing collisions   - Expected     0.00, actual     0.00 ( 0.00x)
+ Window at 274 - Testing collisions   - Expected     0.00, actual     0.00 ( 0.00x)
+ Window at 275 - Testing collisions   - Expected     0.00, actual     0.00 ( 0.00x)
+ Window at 276 - Testing collisions   - Expected     0.00, actual     0.00 ( 0.00x)
+ Window at 277 - Testing collisions   - Expected     0.00, actual     0.00 ( 0.00x)
+ Window at 278 - Testing collisions   - Expected     0.00, actual     0.00 ( 0.00x)
+ Window at 279 - Testing collisions   - Expected     0.00, actual     0.00 ( 0.00x)
+ Window at 280 - Testing collisions   - Expected     0.00, actual     0.00 ( 0.00x)
+ Window at 281 - Testing collisions   - Expected     0.00, actual     0.00 ( 0.00x)
+ Window at 282 - Testing collisions   - Expected     0.00, actual     0.00 ( 0.00x)
+ Window at 283 - Testing collisions   - Expected     0.00, actual     0.00 ( 0.00x)
+ Window at 284 - Testing collisions   - Expected     0.00, actual     0.00 ( 0.00x)
+ Window at 285 - Testing collisions   - Expected     0.00, actual     0.00 ( 0.00x)
+ Window at 286 - Testing collisions   - Expected     0.00, actual     0.00 ( 0.00x)
+ Window at 287 - Testing collisions   - Expected     0.00, actual     0.00 ( 0.00x)
+ Window at 288 - Testing collisions   - Expected     0.00, actual     0.00 ( 0.00x)
+ Window at 289 - Testing collisions   - Expected     0.00, actual     0.00 ( 0.00x)
+ Window at 290 - Testing collisions   - Expected     0.00, actual     0.00 ( 0.00x)
+ Window at 291 - Testing collisions   - Expected     0.00, actual     0.00 ( 0.00x)
+ Window at 292 - Testing collisions   - Expected     0.00, actual     0.00 ( 0.00x)
+ Window at 293 - Testing collisions   - Expected     0.00, actual     0.00 ( 0.00x)
+ Window at 294 - Testing collisions   - Expected     0.00, actual     0.00 ( 0.00x)
+ Window at 295 - Testing collisions   - Expected     0.00, actual     0.00 ( 0.00x)
+ Window at 296 - Testing collisions   - Expected     0.00, actual     0.00 ( 0.00x)
+ Window at 297 - Testing collisions   - Expected     0.00, actual     0.00 ( 0.00x)
+ Window at 298 - Testing collisions   - Expected     0.00, actual     0.00 ( 0.00x)
+ Window at 299 - Testing collisions   - Expected     0.00, actual     0.00 ( 0.00x)
+ Window at 300 - Testing collisions   - Expected     0.00, actual     0.00 ( 0.00x)
+ Window at 301 - Testing collisions   - Expected     0.00, actual     0.00 ( 0.00x)
+ Window at 302 - Testing collisions   - Expected     0.00, actual     0.00 ( 0.00x)
+ Window at 303 - Testing collisions   - Expected     0.00, actual     0.00 ( 0.00x)
+ Window at 304 - Testing collisions   - Expected     0.00, actual     0.00 ( 0.00x)
+ Window at 305 - Testing collisions   - Expected     0.00, actual     0.00 ( 0.00x)
+ Window at 306 - Testing collisions   - Expected     0.00, actual     0.00 ( 0.00x)
+ Window at 307 - Testing collisions   - Expected     0.00, actual     0.00 ( 0.00x)
+ Window at 308 - Testing collisions   - Expected     0.00, actual     0.00 ( 0.00x)
+ Window at 309 - Testing collisions   - Expected     0.00, actual     0.00 ( 0.00x)
+ Window at 310 - Testing collisions   - Expected     0.00, actual     0.00 ( 0.00x)
+ Window at 311 - Testing collisions   - Expected     0.00, actual     0.00 ( 0.00x)
+ Window at 312 - Testing collisions   - Expected     0.00, actual     0.00 ( 0.00x)
+ Window at 313 - Testing collisions   - Expected     0.00, actual     0.00 ( 0.00x)
+ Window at 314 - Testing collisions   - Expected     0.00, actual     0.00 ( 0.00x)
+ Window at 315 - Testing collisions   - Expected     0.00, actual     0.00 ( 0.00x)
+ Window at 316 - Testing collisions   - Expected     0.00, actual     0.00 ( 0.00x)
+ Window at 317 - Testing collisions   - Expected     0.00, actual     0.00 ( 0.00x)
+ Window at 318 - Testing collisions   - Expected     0.00, actual     0.00 ( 0.00x)
+ Window at 319 - Testing collisions   - Expected     0.00, actual     0.00 ( 0.00x)
+ Window at 320 - Testing collisions   - Expected     0.00, actual     0.00 ( 0.00x)
+ Window at 321 - Testing collisions   - Expected     0.00, actual     0.00 ( 0.00x)
+ Window at 322 - Testing collisions   - Expected     0.00, actual     0.00 ( 0.00x)
+ Window at 323 - Testing collisions   - Expected     0.00, actual     0.00 ( 0.00x)
+ Window at 324 - Testing collisions   - Expected     0.00, actual     0.00 ( 0.00x)
+ Window at 325 - Testing collisions   - Expected     0.00, actual     0.00 ( 0.00x)
+ Window at 326 - Testing collisions   - Expected     0.00, actual     0.00 ( 0.00x)
+ Window at 327 - Testing collisions   - Expected     0.00, actual     0.00 ( 0.00x)
+ Window at 328 - Testing collisions   - Expected     0.00, actual     0.00 ( 0.00x)
+ Window at 329 - Testing collisions   - Expected     0.00, actual     0.00 ( 0.00x)
+ Window at 330 - Testing collisions   - Expected     0.00, actual     0.00 ( 0.00x)
+ Window at 331 - Testing collisions   - Expected     0.00, actual     0.00 ( 0.00x)
+ Window at 332 - Testing collisions   - Expected     0.00, actual     0.00 ( 0.00x)
+ Window at 333 - Testing collisions   - Expected     0.00, actual     0.00 ( 0.00x)
+ Window at 334 - Testing collisions   - Expected     0.00, actual     0.00 ( 0.00x)
+ Window at 335 - Testing collisions   - Expected     0.00, actual     0.00 ( 0.00x)
+ Window at 336 - Testing collisions   - Expected     0.00, actual     0.00 ( 0.00x)
+ Window at 337 - Testing collisions   - Expected     0.00, actual     0.00 ( 0.00x)
+ Window at 338 - Testing collisions   - Expected     0.00, actual     0.00 ( 0.00x)
+ Window at 339 - Testing collisions   - Expected     0.00, actual     0.00 ( 0.00x)
+ Window at 340 - Testing collisions   - Expected     0.00, actual     0.00 ( 0.00x)
+ Window at 341 - Testing collisions   - Expected     0.00, actual     0.00 ( 0.00x)
+ Window at 342 - Testing collisions   - Expected     0.00, actual     0.00 ( 0.00x)
+ Window at 343 - Testing collisions   - Expected     0.00, actual     0.00 ( 0.00x)
+ Window at 344 - Testing collisions   - Expected     0.00, actual     0.00 ( 0.00x)
+ Window at 345 - Testing collisions   - Expected     0.00, actual     0.00 ( 0.00x)
+ Window at 346 - Testing collisions   - Expected     0.00, actual     0.00 ( 0.00x)
+ Window at 347 - Testing collisions   - Expected     0.00, actual     0.00 ( 0.00x)
+ Window at 348 - Testing collisions   - Expected     0.00, actual     0.00 ( 0.00x)
+ Window at 349 - Testing collisions   - Expected     0.00, actual     0.00 ( 0.00x)
+ Window at 350 - Testing collisions   - Expected     0.00, actual     0.00 ( 0.00x)
+ Window at 351 - Testing collisions   - Expected     0.00, actual     0.00 ( 0.00x)
+ Window at 352 - Testing collisions   - Expected     0.00, actual     0.00 ( 0.00x)
+ Window at 353 - Testing collisions   - Expected     0.00, actual     0.00 ( 0.00x)
+ Window at 354 - Testing collisions   - Expected     0.00, actual     0.00 ( 0.00x)
+ Window at 355 - Testing collisions   - Expected     0.00, actual     0.00 ( 0.00x)
+ Window at 356 - Testing collisions   - Expected     0.00, actual     0.00 ( 0.00x)
+ Window at 357 - Testing collisions   - Expected     0.00, actual     0.00 ( 0.00x)
+ Window at 358 - Testing collisions   - Expected     0.00, actual     0.00 ( 0.00x)
+ Window at 359 - Testing collisions   - Expected     0.00, actual     0.00 ( 0.00x)
+ Window at 360 - Testing collisions   - Expected     0.00, actual     0.00 ( 0.00x)
+ Window at 361 - Testing collisions   - Expected     0.00, actual     0.00 ( 0.00x)
+ Window at 362 - Testing collisions   - Expected     0.00, actual     0.00 ( 0.00x)
+ Window at 363 - Testing collisions   - Expected     0.00, actual     0.00 ( 0.00x)
+ Window at 364 - Testing collisions   - Expected     0.00, actual     0.00 ( 0.00x)
+ Window at 365 - Testing collisions   - Expected     0.00, actual     0.00 ( 0.00x)
+ Window at 366 - Testing collisions   - Expected     0.00, actual     0.00 ( 0.00x)
+ Window at 367 - Testing collisions   - Expected     0.00, actual     0.00 ( 0.00x)
+ Window at 368 - Testing collisions   - Expected     0.00, actual     0.00 ( 0.00x)
+ Window at 369 - Testing collisions   - Expected     0.00, actual     0.00 ( 0.00x)
+ Window at 370 - Testing collisions   - Expected     0.00, actual     0.00 ( 0.00x)
+ Window at 371 - Testing collisions   - Expected     0.00, actual     0.00 ( 0.00x)
+ Window at 372 - Testing collisions   - Expected     0.00, actual     0.00 ( 0.00x)
+ Window at 373 - Testing collisions   - Expected     0.00, actual     0.00 ( 0.00x)
+ Window at 374 - Testing collisions   - Expected     0.00, actual     0.00 ( 0.00x)
+ Window at 375 - Testing collisions   - Expected     0.00, actual     0.00 ( 0.00x)
+ Window at 376 - Testing collisions   - Expected     0.00, actual     0.00 ( 0.00x)
+ Window at 377 - Testing collisions   - Expected     0.00, actual     0.00 ( 0.00x)
+ Window at 378 - Testing collisions   - Expected     0.00, actual     0.00 ( 0.00x)
+ Window at 379 - Testing collisions   - Expected     0.00, actual     0.00 ( 0.00x)
+ Window at 380 - Testing collisions   - Expected     0.00, actual     0.00 ( 0.00x)
+ Window at 381 - Testing collisions   - Expected     0.00, actual     0.00 ( 0.00x)
+ Window at 382 - Testing collisions   - Expected     0.00, actual     0.00 ( 0.00x)
+ Window at 383 - Testing collisions   - Expected     0.00, actual     0.00 ( 0.00x)
+ Window at 384 - Testing collisions   - Expected     0.00, actual     0.00 ( 0.00x)
+ Window at 385 - Testing collisions   - Expected     0.00, actual     0.00 ( 0.00x)
+ Window at 386 - Testing collisions   - Expected     0.00, actual     0.00 ( 0.00x)
+ Window at 387 - Testing collisions   - Expected     0.00, actual     0.00 ( 0.00x)
+ Window at 388 - Testing collisions   - Expected     0.00, actual     0.00 ( 0.00x)
+ Window at 389 - Testing collisions   - Expected     0.00, actual     0.00 ( 0.00x)
+ Window at 390 - Testing collisions   - Expected     0.00, actual     0.00 ( 0.00x)
+ Window at 391 - Testing collisions   - Expected     0.00, actual     0.00 ( 0.00x)
+ Window at 392 - Testing collisions   - Expected     0.00, actual     0.00 ( 0.00x)
+ Window at 393 - Testing collisions   - Expected     0.00, actual     0.00 ( 0.00x)
+ Window at 394 - Testing collisions   - Expected     0.00, actual     0.00 ( 0.00x)
+ Window at 395 - Testing collisions   - Expected     0.00, actual     0.00 ( 0.00x)
+ Window at 396 - Testing collisions   - Expected     0.00, actual     0.00 ( 0.00x)
+ Window at 397 - Testing collisions   - Expected     0.00, actual     0.00 ( 0.00x)
+ Window at 398 - Testing collisions   - Expected     0.00, actual     0.00 ( 0.00x)
+ Window at 399 - Testing collisions   - Expected     0.00, actual     0.00 ( 0.00x)
+ Window at 400 - Testing collisions   - Expected     0.00, actual     0.00 ( 0.00x)
+ Window at 401 - Testing collisions   - Expected     0.00, actual     0.00 ( 0.00x)
+ Window at 402 - Testing collisions   - Expected     0.00, actual     0.00 ( 0.00x)
+ Window at 403 - Testing collisions   - Expected     0.00, actual     0.00 ( 0.00x)
+ Window at 404 - Testing collisions   - Expected     0.00, actual     0.00 ( 0.00x)
+ Window at 405 - Testing collisions   - Expected     0.00, actual     0.00 ( 0.00x)
+ Window at 406 - Testing collisions   - Expected     0.00, actual     0.00 ( 0.00x)
+ Window at 407 - Testing collisions   - Expected     0.00, actual     0.00 ( 0.00x)
+ Window at 408 - Testing collisions   - Expected     0.00, actual     0.00 ( 0.00x)
+ Window at 409 - Testing collisions   - Expected     0.00, actual     0.00 ( 0.00x)
+ Window at 410 - Testing collisions   - Expected     0.00, actual     0.00 ( 0.00x)
+ Window at 411 - Testing collisions   - Expected     0.00, actual     0.00 ( 0.00x)
+ Window at 412 - Testing collisions   - Expected     0.00, actual     0.00 ( 0.00x)
+ Window at 413 - Testing collisions   - Expected     0.00, actual     0.00 ( 0.00x)
+ Window at 414 - Testing collisions   - Expected     0.00, actual     0.00 ( 0.00x)
+ Window at 415 - Testing collisions   - Expected     0.00, actual     0.00 ( 0.00x)
+ Window at 416 - Testing collisions   - Expected     0.00, actual     0.00 ( 0.00x)
+ Window at 417 - Testing collisions   - Expected     0.00, actual     0.00 ( 0.00x)
+ Window at 418 - Testing collisions   - Expected     0.00, actual     0.00 ( 0.00x)
+ Window at 419 - Testing collisions   - Expected     0.00, actual     0.00 ( 0.00x)
+ Window at 420 - Testing collisions   - Expected     0.00, actual     0.00 ( 0.00x)
+ Window at 421 - Testing collisions   - Expected     0.00, actual     0.00 ( 0.00x)
+ Window at 422 - Testing collisions   - Expected     0.00, actual     0.00 ( 0.00x)
+ Window at 423 - Testing collisions   - Expected     0.00, actual     0.00 ( 0.00x)
+ Window at 424 - Testing collisions   - Expected     0.00, actual     0.00 ( 0.00x)
+ Window at 425 - Testing collisions   - Expected     0.00, actual     0.00 ( 0.00x)
+ Window at 426 - Testing collisions   - Expected     0.00, actual     0.00 ( 0.00x)
+ Window at 427 - Testing collisions   - Expected     0.00, actual     0.00 ( 0.00x)
+ Window at 428 - Testing collisions   - Expected     0.00, actual     0.00 ( 0.00x)
+ Window at 429 - Testing collisions   - Expected     0.00, actual     0.00 ( 0.00x)
+ Window at 430 - Testing collisions   - Expected     0.00, actual     0.00 ( 0.00x)
+ Window at 431 - Testing collisions   - Expected     0.00, actual     0.00 ( 0.00x)
+ Window at 432 - Testing collisions   - Expected     0.00, actual     0.00 ( 0.00x)
+ Window at 433 - Testing collisions   - Expected     0.00, actual     0.00 ( 0.00x)
+ Window at 434 - Testing collisions   - Expected     0.00, actual     0.00 ( 0.00x)
+ Window at 435 - Testing collisions   - Expected     0.00, actual     0.00 ( 0.00x)
+ Window at 436 - Testing collisions   - Expected     0.00, actual     0.00 ( 0.00x)
+ Window at 437 - Testing collisions   - Expected     0.00, actual     0.00 ( 0.00x)
+ Window at 438 - Testing collisions   - Expected     0.00, actual     0.00 ( 0.00x)
+ Window at 439 - Testing collisions   - Expected     0.00, actual     0.00 ( 0.00x)
+ Window at 440 - Testing collisions   - Expected     0.00, actual     0.00 ( 0.00x)
+ Window at 441 - Testing collisions   - Expected     0.00, actual     0.00 ( 0.00x)
+ Window at 442 - Testing collisions   - Expected     0.00, actual     0.00 ( 0.00x)
+ Window at 443 - Testing collisions   - Expected     0.00, actual     0.00 ( 0.00x)
+ Window at 444 - Testing collisions   - Expected     0.00, actual     0.00 ( 0.00x)
+ Window at 445 - Testing collisions   - Expected     0.00, actual     0.00 ( 0.00x)
+ Window at 446 - Testing collisions   - Expected     0.00, actual     0.00 ( 0.00x)
+ Window at 447 - Testing collisions   - Expected     0.00, actual     0.00 ( 0.00x)
+ Window at 448 - Testing collisions   - Expected     0.00, actual     0.00 ( 0.00x)
+ Window at 449 - Testing collisions   - Expected     0.00, actual     0.00 ( 0.00x)
+ Window at 450 - Testing collisions   - Expected     0.00, actual     0.00 ( 0.00x)
+ Window at 451 - Testing collisions   - Expected     0.00, actual     0.00 ( 0.00x)
+ Window at 452 - Testing collisions   - Expected     0.00, actual     0.00 ( 0.00x)
+ Window at 453 - Testing collisions   - Expected     0.00, actual     0.00 ( 0.00x)
+ Window at 454 - Testing collisions   - Expected     0.00, actual     0.00 ( 0.00x)
+ Window at 455 - Testing collisions   - Expected     0.00, actual     0.00 ( 0.00x)
+ Window at 456 - Testing collisions   - Expected     0.00, actual     0.00 ( 0.00x)
+ Window at 457 - Testing collisions   - Expected     0.00, actual     0.00 ( 0.00x)
+ Window at 458 - Testing collisions   - Expected     0.00, actual     0.00 ( 0.00x)
+ Window at 459 - Testing collisions   - Expected     0.00, actual     0.00 ( 0.00x)
+ Window at 460 - Testing collisions   - Expected     0.00, actual     0.00 ( 0.00x)
+ Window at 461 - Testing collisions   - Expected     0.00, actual     0.00 ( 0.00x)
+ Window at 462 - Testing collisions   - Expected     0.00, actual     0.00 ( 0.00x)
+ Window at 463 - Testing collisions   - Expected     0.00, actual     0.00 ( 0.00x)
+ Window at 464 - Testing collisions   - Expected     0.00, actual     0.00 ( 0.00x)
+ Window at 465 - Testing collisions   - Expected     0.00, actual     0.00 ( 0.00x)
+ Window at 466 - Testing collisions   - Expected     0.00, actual     0.00 ( 0.00x)
+ Window at 467 - Testing collisions   - Expected     0.00, actual     0.00 ( 0.00x)
+ Window at 468 - Testing collisions   - Expected     0.00, actual     0.00 ( 0.00x)
+ Window at 469 - Testing collisions   - Expected     0.00, actual     0.00 ( 0.00x)
+ Window at 470 - Testing collisions   - Expected     0.00, actual     0.00 ( 0.00x)
+ Window at 471 - Testing collisions   - Expected     0.00, actual     0.00 ( 0.00x)
+ Window at 472 - Testing collisions   - Expected     0.00, actual     0.00 ( 0.00x)
+ Window at 473 - Testing collisions   - Expected     0.00, actual     0.00 ( 0.00x)
+ Window at 474 - Testing collisions   - Expected     0.00, actual     0.00 ( 0.00x)
+ Window at 475 - Testing collisions   - Expected     0.00, actual     0.00 ( 0.00x)
+ Window at 476 - Testing collisions   - Expected     0.00, actual     0.00 ( 0.00x)
+ Window at 477 - Testing collisions   - Expected     0.00, actual     0.00 ( 0.00x)
+ Window at 478 - Testing collisions   - Expected     0.00, actual     0.00 ( 0.00x)
+ Window at 479 - Testing collisions   - Expected     0.00, actual     0.00 ( 0.00x)
+ Window at 480 - Testing collisions   - Expected     0.00, actual     0.00 ( 0.00x)
+ Window at 481 - Testing collisions   - Expected     0.00, actual     0.00 ( 0.00x)
+ Window at 482 - Testing collisions   - Expected     0.00, actual     0.00 ( 0.00x)
+ Window at 483 - Testing collisions   - Expected     0.00, actual     0.00 ( 0.00x)
+ Window at 484 - Testing collisions   - Expected     0.00, actual     0.00 ( 0.00x)
+ Window at 485 - Testing collisions   - Expected     0.00, actual     0.00 ( 0.00x)
+ Window at 486 - Testing collisions   - Expected     0.00, actual     0.00 ( 0.00x)
+ Window at 487 - Testing collisions   - Expected     0.00, actual     0.00 ( 0.00x)
+ Window at 488 - Testing collisions   - Expected     0.00, actual     0.00 ( 0.00x)
+ Window at 489 - Testing collisions   - Expected     0.00, actual     0.00 ( 0.00x)
+ Window at 490 - Testing collisions   - Expected     0.00, actual     0.00 ( 0.00x)
+ Window at 491 - Testing collisions   - Expected     0.00, actual     0.00 ( 0.00x)
+ Window at 492 - Testing collisions   - Expected     0.00, actual     0.00 ( 0.00x)
+ Window at 493 - Testing collisions   - Expected     0.00, actual     0.00 ( 0.00x)
+ Window at 494 - Testing collisions   - Expected     0.00, actual     0.00 ( 0.00x)
+ Window at 495 - Testing collisions   - Expected     0.00, actual     0.00 ( 0.00x)
+ Window at 496 - Testing collisions   - Expected     0.00, actual     0.00 ( 0.00x)
+ Window at 497 - Testing collisions   - Expected     0.00, actual     0.00 ( 0.00x)
+ Window at 498 - Testing collisions   - Expected     0.00, actual     0.00 ( 0.00x)
+ Window at 499 - Testing collisions   - Expected     0.00, actual     0.00 ( 0.00x)
+ Window at 500 - Testing collisions   - Expected     0.00, actual     0.00 ( 0.00x)
+ Window at 501 - Testing collisions   - Expected     0.00, actual     0.00 ( 0.00x)
+ Window at 502 - Testing collisions   - Expected     0.00, actual     0.00 ( 0.00x)
+ Window at 503 - Testing collisions   - Expected     0.00, actual     0.00 ( 0.00x)
+ Window at 504 - Testing collisions   - Expected     0.00, actual     0.00 ( 0.00x)
+ Window at 505 - Testing collisions   - Expected     0.00, actual     0.00 ( 0.00x)
+ Window at 506 - Testing collisions   - Expected     0.00, actual     0.00 ( 0.00x)
+ Window at 507 - Testing collisions   - Expected     0.00, actual     0.00 ( 0.00x)
+ Window at 508 - Testing collisions   - Expected     0.00, actual     0.00 ( 0.00x)
+ Window at 509 - Testing collisions   - Expected     0.00, actual     0.00 ( 0.00x)
+ Window at 510 - Testing collisions   - Expected     0.00, actual     0.00 ( 0.00x)
+ Window at 511 - Testing collisions   - Expected     0.00, actual     0.00 ( 0.00x)
+ Window at 512 - Testing collisions   - Expected     0.00, actual     0.00 ( 0.00x)
+ 
+ 
+ Input vcode 0x00000001, Output vcode 0x00000001, Result vcode 0x00000001
+ Verification value is 0x00000001 - Testing took 7124.576314 seconds
+ -------------------------------------------------------------------------------
+ 
+ real	118m44.493s
+ user	118m44.580s
+ sys	0m0.004s
+ -------------------------------------------------------------------------------
+ --- Testing rf256 "RainForest, 256-bit"
+ 
+ [[[ Keyset 'Text' Tests ]]]
+ 
+ Keyset 'Text' - keys of form "Foo[XXXX]Bar" - 14776336 keys
+ Testing collisions   - Expected     0.00, actual     0.00 ( 0.00x)
+ Testing distribution - Worst bias is the  20-bit window at bit 140 - 0.026%
+ 
+ Keyset 'Text' - keys of form "FooBar[XXXX]" - 14776336 keys
+ Testing collisions   - Expected     0.00, actual     0.00 ( 0.00x)
+ Testing distribution - Worst bias is the  20-bit window at bit 255 - 0.031%
+ 
+ Keyset 'Text' - keys of form "[XXXX]FooBar" - 14776336 keys
+ Testing collisions   - Expected     0.00, actual     0.00 ( 0.00x)
+ Testing distribution - Worst bias is the  20-bit window at bit 209 - 0.031%
+ 
+ 
+ 
+ Input vcode 0x00000001, Output vcode 0x00000001, Result vcode 0x00000001
+ Verification value is 0x00000001 - Testing took 539.215108 seconds
+ -------------------------------------------------------------------------------
+ 
+ real	8m59.219s
+ user	8m59.144s
+ sys	0m0.080s
+ -------------------------------------------------------------------------------
+ --- Testing rf256 "RainForest, 256-bit"
+ 
+ [[[ Keyset 'Zeroes' Tests ]]]
+ 
+ Keyset 'Zeroes' - 65536 keys
+ Testing collisions   - Expected     0.00, actual     0.00 ( 0.00x)
+ Testing distribution - Worst bias is the  13-bit window at bit 179 - 0.533%
+ 
+ 
+ 
+ Input vcode 0x00000001, Output vcode 0x00000001, Result vcode 0x00000001
+ Verification value is 0x00000001 - Testing took 350.056779 seconds
+ -------------------------------------------------------------------------------
+ 
+ real	5m50.062s
+ user	5m50.064s
+ sys	0m0.000s
+ -------------------------------------------------------------------------------
+ --- Testing rf256 "RainForest, 256-bit"
+ 
+ [[[ Keyset 'Seed' Tests ]]]
+ 
+ Keyset 'Seed' - 1000000 keys
+ Testing collisions   - Expected     0.00, actual     0.00 ( 0.00x)
+ Testing distribution - Worst bias is the  17-bit window at bit  45 - 0.117%
+ 
+ 
+ 
+ Input vcode 0x00000001, Output vcode 0x00000001, Result vcode 0x00000001
+ Verification value is 0x00000001 - Testing took 13.345410 seconds
+ -------------------------------------------------------------------------------
+ 
+ real	0m13.356s
+ user	0m13.352s
+ sys	0m0.000s
+ -------------------------------------------------------------------------------
+ --- Testing rf256 "RainForest, 256-bit"
+ 
+ [[[ Differential Distribution Tests ]]]
+ 
+ Testing bit 0
+ Testing collisions   - Expected     0.00, actual     0.00 ( 0.00x)
+ Testing distribution - 
+ [...........] [BS: removed 16383 other similar lines)
+ Worst bias is the  18-bit window at bit 107 - 0.113%
+ 
+ Testing bit 1
+ Testing collisions   - Expected     0.00, actual     0.00 ( 0.00x)
+ Testing distribution - 
+ Worst bias is the  18-bit window at bit 154 - 0.080%
+ 
+ Testing bit 2
+ Testing collisions   - Expected     0.00, actual     0.00 ( 0.00x)
+ Testing distribution - 
+ Worst bias is the  18-bit window at bit 109 - 0.080%
+ 
+ Testing bit 3
+ Testing collisions   - Expected     0.00, actual     0.00 ( 0.00x)
+ Testing distribution - 
+ Worst bias is the  18-bit window at bit 202 - 0.098%
+ 
+ Testing bit 4
+ Testing collisions   - Expected     0.00, actual     0.00 ( 0.00x)
+ Testing distribution - 
+ Worst bias is the  18-bit window at bit 183 - 0.129%
+ 
+ Testing bit 5
+ Testing collisions   - Expected     0.00, actual     0.00 ( 0.00x)
+ Testing distribution - 
+ Worst bias is the  18-bit window at bit 109 - 0.101%
+ 
+ Testing bit 6
+ Testing collisions   - Expected     0.00, actual     0.00 ( 0.00x)
+ Testing distribution - 
+ Worst bias is the  18-bit window at bit 212 - 0.119%
+ 
+ Testing bit 7
+ Testing collisions   - Expected     0.00, actual     0.00 ( 0.00x)
+ Testing distribution - 
+ Worst bias is the  18-bit window at bit  44 - 0.111%
+ 
+ Testing bit 8
+ Testing collisions   - Expected     0.00, actual     0.00 ( 0.00x)
+ Testing distribution - 
+ Worst bias is the  18-bit window at bit  71 - 0.106%
+ 
+ Testing bit 9
+ Testing collisions   - Expected     0.00, actual     0.00 ( 0.00x)
+ Testing distribution - 
+ Worst bias is the  18-bit window at bit 231 - 0.098%
+ 
+ Testing bit 10
+ Testing collisions   - Expected     0.00, actual     0.00 ( 0.00x)
+ Testing distribution - 
+ Worst bias is the  18-bit window at bit  32 - 0.070%
+ 
+ Testing bit 11
+ Testing collisions   - Expected     0.00, actual     0.00 ( 0.00x)
+ Testing distribution - 
+ Worst bias is the  18-bit window at bit 122 - 0.096%
+ 
+ Testing bit 12
+ Testing collisions   - Expected     0.00, actual     0.00 ( 0.00x)
+ Testing distribution - 
+ Worst bias is the  18-bit window at bit 144 - 0.092%
+ 
+ Testing bit 13
+ Testing collisions   - Expected     0.00, actual     0.00 ( 0.00x)
+ Testing distribution - 
+ Worst bias is the  18-bit window at bit 172 - 0.103%
+ 
+ Testing bit 14
+ Testing collisions   - Expected     0.00, actual     0.00 ( 0.00x)
+ Testing distribution - 
+ Worst bias is the  18-bit window at bit 250 - 0.106%
+ 
+ Testing bit 15
+ Testing collisions   - Expected     0.00, actual     0.00 ( 0.00x)
+ Testing distribution - 
+ Worst bias is the  18-bit window at bit 112 - 0.107%
+ 
+ Testing bit 16
+ Testing collisions   - Expected     0.00, actual     0.00 ( 0.00x)
+ Testing distribution - 
+ Worst bias is the  18-bit window at bit 172 - 0.100%
+ 
+ Testing bit 17
+ Testing collisions   - Expected     0.00, actual     0.00 ( 0.00x)
+ Testing distribution - 
+ Worst bias is the  17-bit window at bit 198 - 0.081%
+ 
+ Testing bit 18
+ Testing collisions   - Expected     0.00, actual     0.00 ( 0.00x)
+ Testing distribution - 
+ Worst bias is the  18-bit window at bit 162 - 0.076%
+ 
+ Testing bit 19
+ Testing collisions   - Expected     0.00, actual     0.00 ( 0.00x)
+ Testing distribution - 
+ Worst bias is the  18-bit window at bit  80 - 0.106%
+ 
+ Testing bit 20
+ Testing collisions   - Expected     0.00, actual     0.00 ( 0.00x)
+ Testing distribution - 
+ Worst bias is the  18-bit window at bit  59 - 0.074%
+ 
+ Testing bit 21
+ Testing collisions   - Expected     0.00, actual     0.00 ( 0.00x)
+ Testing distribution - 
+ Worst bias is the  18-bit window at bit 132 - 0.093%
+ 
+ Testing bit 22
+ Testing collisions   - Expected     0.00, actual     0.00 ( 0.00x)
+ Testing distribution - 
+ Worst bias is the  18-bit window at bit 173 - 0.105%
+ 
+ Testing bit 23
+ Testing collisions   - Expected     0.00, actual     0.00 ( 0.00x)
+ Testing distribution - 
+ Worst bias is the  18-bit window at bit  48 - 0.122%
+ 
+ Testing bit 24
+ Testing collisions   - Expected     0.00, actual     0.00 ( 0.00x)
+ Testing distribution - 
+ Worst bias is the  18-bit window at bit 144 - 0.101%
+ 
+ Testing bit 25
+ Testing collisions   - Expected     0.00, actual     0.00 ( 0.00x)
+ Testing distribution - 
+ Worst bias is the  18-bit window at bit  93 - 0.122%
+ 
+ Testing bit 26
+ Testing collisions   - Expected     0.00, actual     0.00 ( 0.00x)
+ Testing distribution - 
+ Worst bias is the  18-bit window at bit  67 - 0.083%
+ 
+ Testing bit 27
+ Testing collisions   - Expected     0.00, actual     0.00 ( 0.00x)
+ Testing distribution - 
+ Worst bias is the  18-bit window at bit 186 - 0.101%
+ 
+ Testing bit 28
+ Testing collisions   - Expected     0.00, actual     0.00 ( 0.00x)
+ Testing distribution - 
+ Worst bias is the  18-bit window at bit   4 - 0.107%
+ 
+ Testing bit 29
+ Testing collisions   - Expected     0.00, actual     0.00 ( 0.00x)
+ Testing distribution - 
+ Worst bias is the  18-bit window at bit 148 - 0.106%
+ 
+ Testing bit 30
+ Testing collisions   - Expected     0.00, actual     0.00 ( 0.00x)
+ Testing distribution - 
+ Worst bias is the  18-bit window at bit  42 - 0.093%
+ 
+ Testing bit 31
+ Testing collisions   - Expected     0.00, actual     0.00 ( 0.00x)
+ Testing distribution - 
+ Worst bias is the  18-bit window at bit 101 - 0.085%
+ 
+ Testing bit 32
+ Testing collisions   - Expected     0.00, actual     0.00 ( 0.00x)
+ Testing distribution - 
+ Worst bias is the  18-bit window at bit 133 - 0.099%
+ 
+ Testing bit 33
+ Testing collisions   - Expected     0.00, actual     0.00 ( 0.00x)
+ Testing distribution - 
+ Worst bias is the  18-bit window at bit 160 - 0.088%
+ 
+ Testing bit 34
+ Testing collisions   - Expected     0.00, actual     0.00 ( 0.00x)
+ Testing distribution - 
+ Worst bias is the  18-bit window at bit 169 - 0.120%
+ 
+ Testing bit 35
+ Testing collisions   - Expected     0.00, actual     0.00 ( 0.00x)
+ Testing distribution - 
+ Worst bias is the  18-bit window at bit  18 - 0.075%
+ 
+ Testing bit 36
+ Testing collisions   - Expected     0.00, actual     0.00 ( 0.00x)
+ Testing distribution - 
+ Worst bias is the  18-bit window at bit  90 - 0.101%
+ 
+ Testing bit 37
+ Testing collisions   - Expected     0.00, actual     0.00 ( 0.00x)
+ Testing distribution - 
+ Worst bias is the  18-bit window at bit 148 - 0.078%
+ 
+ Testing bit 38
+ Testing collisions   - Expected     0.00, actual     0.00 ( 0.00x)
+ Testing distribution - 
+ Worst bias is the  18-bit window at bit 200 - 0.092%
+ 
+ Testing bit 39
+ Testing collisions   - Expected     0.00, actual     0.00 ( 0.00x)
+ Testing distribution - 
+ Worst bias is the  18-bit window at bit 162 - 0.079%
+ 
+ Testing bit 40
+ Testing collisions   - Expected     0.00, actual     0.00 ( 0.00x)
+ Testing distribution - 
+ Worst bias is the  18-bit window at bit   4 - 0.095%
+ 
+ Testing bit 41
+ Testing collisions   - Expected     0.00, actual     0.00 ( 0.00x)
+ Testing distribution - 
+ Worst bias is the  18-bit window at bit  69 - 0.113%
+ 
+ Testing bit 42
+ Testing collisions   - Expected     0.00, actual     0.00 ( 0.00x)
+ Testing distribution - 
+ Worst bias is the  18-bit window at bit 248 - 0.084%
+ 
+ Testing bit 43
+ Testing collisions   - Expected     0.00, actual     0.00 ( 0.00x)
+ Testing distribution - 
+ Worst bias is the  18-bit window at bit  71 - 0.108%
+ 
+ Testing bit 44
+ Testing collisions   - Expected     0.00, actual     0.00 ( 0.00x)
+ Testing distribution - 
+ Worst bias is the  18-bit window at bit 176 - 0.089%
+ 
+ Testing bit 45
+ Testing collisions   - Expected     0.00, actual     0.00 ( 0.00x)
+ Testing distribution - 
+ Worst bias is the  18-bit window at bit 243 - 0.087%
+ 
+ Testing bit 46
+ Testing collisions   - Expected     0.00, actual     0.00 ( 0.00x)
+ Testing distribution - 
+ Worst bias is the  18-bit window at bit 204 - 0.127%
+ 
+ Testing bit 47
+ Testing collisions   - Expected     0.00, actual     0.00 ( 0.00x)
+ Testing distribution - 
+ Worst bias is the  18-bit window at bit  26 - 0.081%
+ 
+ Testing bit 48
+ Testing collisions   - Expected     0.00, actual     0.00 ( 0.00x)
+ Testing distribution - 
+ Worst bias is the  18-bit window at bit  16 - 0.094%
+ 
+ Testing bit 49
+ Testing collisions   - Expected     0.00, actual     0.00 ( 0.00x)
+ Testing distribution - 
+ Worst bias is the  18-bit window at bit  80 - 0.080%
+ 
+ Testing bit 50
+ Testing collisions   - Expected     0.00, actual     0.00 ( 0.00x)
+ Testing distribution - 
+ Worst bias is the  18-bit window at bit 135 - 0.103%
+ 
+ Testing bit 51
+ Testing collisions   - Expected     0.00, actual     0.00 ( 0.00x)
+ Testing distribution - 
+ Worst bias is the  18-bit window at bit 217 - 0.097%
+ 
+ Testing bit 52
+ Testing collisions   - Expected     0.00, actual     0.00 ( 0.00x)
+ Testing distribution - 
+ Worst bias is the  18-bit window at bit 245 - 0.105%
+ 
+ Testing bit 53
+ Testing collisions   - Expected     0.00, actual     0.00 ( 0.00x)
+ Testing distribution - 
+ Worst bias is the  18-bit window at bit 228 - 0.095%
+ 
+ Testing bit 54
+ Testing collisions   - Expected     0.00, actual     0.00 ( 0.00x)
+ Testing distribution - 
+ Worst bias is the  18-bit window at bit 236 - 0.098%
+ 
+ Testing bit 55
+ Testing collisions   - Expected     0.00, actual     0.00 ( 0.00x)
+ Testing distribution - 
+ Worst bias is the  18-bit window at bit  56 - 0.079%
+ 
+ Testing bit 56
+ Testing collisions   - Expected     0.00, actual     0.00 ( 0.00x)
+ Testing distribution - 
+ Worst bias is the  18-bit window at bit 253 - 0.094%
+ 
+ Testing bit 57
+ Testing collisions   - Expected     0.00, actual     0.00 ( 0.00x)
+ Testing distribution - 
+ Worst bias is the  18-bit window at bit 140 - 0.098%
+ 
+ Testing bit 58
+ Testing collisions   - Expected     0.00, actual     0.00 ( 0.00x)
+ Testing distribution - 
+ Worst bias is the  18-bit window at bit 172 - 0.156%
+ 
+ Testing bit 59
+ Testing collisions   - Expected     0.00, actual     0.00 ( 0.00x)
+ Testing distribution - 
+ Worst bias is the  18-bit window at bit 202 - 0.154%
+ 
+ Testing bit 60
+ Testing collisions   - Expected     0.00, actual     0.00 ( 0.00x)
+ Testing distribution - 
+ Worst bias is the  18-bit window at bit  50 - 0.090%
+ 
+ Testing bit 61
+ Testing collisions   - Expected     0.00, actual     0.00 ( 0.00x)
+ Testing distribution - 
+ Worst bias is the  18-bit window at bit 166 - 0.100%
+ 
+ Testing bit 62
+ Testing collisions   - Expected     0.00, actual     0.00 ( 0.00x)
+ Testing distribution - 
+ Worst bias is the  18-bit window at bit 246 - 0.086%
+ 
+ Testing bit 63
+ Testing collisions   - Expected     0.00, actual     0.00 ( 0.00x)
+ Testing distribution - 
+ Worst bias is the  18-bit window at bit 152 - 0.078%
+ 
+ 
+ 
+ Input vcode 0x00000001, Output vcode 0x00000001, Result vcode 0x00000001
+ Verification value is 0x00000001 - Testing took 2643.840834 seconds
+ -------------------------------------------------------------------------------
+ 
+ real	44m3.815s
+ user	44m3.852s
+ sys	0m0.000s
+ -------------------------------------------------------------------------------
+ --- Testing rf256 "RainForest, 256-bit"
+ 
+ [[[ Bit Independence Criteria ]]]
+ 
+ ...........
+ (  0,  1) - ........................................................................................
+ (  0,  2) - ........................................................................................
+ --->8--->8--->8--->8--->8--->8--->8--->8--->8--->8--->8--->8--->8--->8--->8--->8--->8--->8--->8--->8
+ ----------------------------------------------------------------------------------------------------
+ (253,254) - ........................................................................................
+ (253,255) - ........................................................................................
+ ----------------------------------------------------------------------------------------------------
+ (254,255) - ........................................................................................
+ ----------------------------------------------------------------------------------------------------
+ Max bias 0.006546 - ( 24 : 143,230)
+ 
+ 
+ Input vcode 0x00000001, Output vcode 0x00000001, Result vcode 0x00000001
+ Verification value is 0x00000001 - Testing took 17901.664517 seconds
+ -------------------------------------------------------------------------------
+ 
+ real	298m26.468s
+ user	298m21.664s
+ sys	0m0.008s
*** main.cpp
--- main.cpp
***************
*** 186,191 ****
--- 186,192 ----
    { metrohash64_2_test,       64, 0xE1FC7C6E, "metrohash64_2",     "MetroHash64_2 for 64-bit" },
    { metrohash128_1_test,     128, 0x20E8A1D7, "metrohash128_1",    "MetroHash128_1 for 64-bit" },
    { metrohash128_2_test,     128, 0x5437C684, "metrohash128_2",    "MetroHash128_2 for 64-bit" },
+   { rainforest_test,         256, 0xDAB2034F, "rf256",             "RainForest, 256-bit" },
  #if defined(__SSE4_2__) && defined(__x86_64__)
    { metrohash64crc_1_test,    64, 0x29C68A50, "metrohash64crc_1",  "MetroHash64crc_1 for x64" },
    { metrohash64crc_2_test,    64, 0x2C00BD9F, "metrohash64crc_2",  "MetroHash64crc_2 for x64" },
***************
*** 791,801 ****
    //SetAffinity((1 << 2));
    SelfTest();
  
!   int timeBegin = clock();
  
    testHash(hashToTest);
  
!   int timeEnd = clock();
  
    printf("\n");
    fflush(NULL);
--- 792,802 ----
    //SetAffinity((1 << 2));
    SelfTest();
  
!   unsigned long timeBegin = clock();
  
    testHash(hashToTest);
  
!   unsigned long timeEnd = clock();
  
    printf("\n");
    fflush(NULL);
*** rainforest.c
--- rainforest.c
***************
*** 0 ****
--- 1,646 ----
+ // RainForest hash algorithm
+ // Author: Bill Schneider
+ // Date: Feb 13th, 2018
+ //
+ // RainForest uses native integer operations which are extremely fast on
+ // modern 64-bit processors, significantly slower on 32-bit processors such
+ // as GPUs, and extremely slow if at all implementable on FPGAs and ASICs.
+ // It makes an intensive use of the L1 cache to maintain a heavy intermediary
+ // state favoring modern CPUs compared to GPUs (small L1 cache shared by many
+ // shaders) or FPGAs (very hard to implement the required low-latency cache)
+ // when scanning ranges for nonces. The purpose is to create a fair balance
+ // between all mining equipments, from mobile phones to extreme performance
+ // GPUs and to rule out farming factories relying on ASICs and FPGAs. The
+ // CRC32 instruction is used a lot as it is extremely fast on low-power ARM
+ // chips and allows such devices to rival high-end PCs mining performance.
+ //
+ // Tests on various devices have shown the following performance :
+ // +--------------------------------------------------------------------------+
+ // | CPU/GPU       Clock Threads Full hash  Nonce scan  Watts   Cost          |
+ // |               (MHz)         (80 bytes) (4 bytes)   total                 |
+ // | Core i7-6700k  4000      8   390 kH/s  1642 kH/s     200  ~$350+PC       |
+ // | Radeon RX560   1300   1024  1100 kH/s  1650 kH/s     300  ~$180+PC       |
+ // | RK3368 (8*A53) 1416      8   534 kH/s  1582 kH/s       6   $60 (Geekbox) |
+ // +--------------------------------------------------------------------------+
+ //
+ // Build instructions on Ubuntu 16.04 :
+ //   - on x86:   use gcc -march=native or -maes to enable AES-NI
+ //   - on ARMv8: use gcc -march=native or -march=armv8-a+crypto+crc to enable
+ //               CRC32 and AES extensions.
+ //
+ // Note: always use the same options to build all files!
+ 
+ #include <stdio.h>
+ #include <stdlib.h>
+ #include <string.h>
+ #include <unistd.h>
+ #include "rainforest.h"
+ 
+ // from aes2r.c
+ void aes2r_encrypt(uint8_t * state, uint8_t * key);
+ 
+ // these archs are fine with unaligned reads
+ #if defined(__x86_64__)||defined(__aarch64__)
+ #define RF_UNALIGNED_LE64
+ #define RF_UNALIGNED_LE32
+ #elif defined(__i386__)||defined(__ARM_ARCH_7A__)
+ #define RF_UNALIGNED_LE32
+ #endif
+ 
+ #define RF256_INIT_CRC 20180213
+ 
+ // the table is used as an 8 bit-aligned array of uint64_t for the first word,
+ // and as a 16 bit-aligned array of uint64_t for the second word. It is filled
+ // with the sha256 of "RainForestProCpuAntiAsic", iterated over and over until
+ // the table is filled. The highest offset being ((uint16_t *)table)[255] we
+ // need to add 6 extra bytes at the end to read an uint64_t. Maybe calculated
+ // on a UNIX system with this loop :
+ //
+ //   ref="RainForestProCpuAntiAsic"
+ //   for ((i=0;i<18;i++)); do
+ //     set $(echo -n $ref|sha256sum)
+ //     echo $1|sed 's/\(..\)/0x\1,/g'
+ //     ref=$(printf $(echo $1|sed 's/\(..\)/\\x\1/g'))
+ //   done
+ 
+ const uint8_t rf_table[256*2+6] = {
+   0x8e,0xc1,0xa8,0x04,0x38,0x78,0x7c,0x54,0x29,0x23,0x1b,0x78,0x9f,0xf9,0x27,0x54,
+   0x11,0x78,0x95,0xb6,0xaf,0x78,0x45,0x16,0x2b,0x9e,0x91,0xe8,0x97,0x25,0xf8,0x63,
+   0x82,0x56,0xcf,0x48,0x6f,0x82,0x14,0x0d,0x61,0xbe,0x47,0xd1,0x37,0xee,0x30,0xa9,
+   0x28,0x1e,0x4b,0xbf,0x07,0xcd,0x41,0xdf,0x23,0x21,0x12,0xb8,0x81,0x99,0x1d,0xe6,
+   0x68,0xcf,0xfa,0x2d,0x8e,0xb9,0x88,0xa7,0x15,0xce,0x9e,0x2f,0xeb,0x1b,0x0f,0x67,
+   0x20,0x68,0x6c,0xa9,0x5d,0xc1,0x7c,0x76,0xdf,0xbd,0x98,0x61,0xb4,0x14,0x65,0x40,
+   0x1e,0x72,0x51,0x74,0x93,0xd3,0xad,0xbe,0x46,0x0a,0x25,0xfb,0x6a,0x5e,0x1e,0x8a,
+   0x5a,0x03,0x3c,0xab,0x12,0xc2,0xd4,0x07,0x91,0xab,0xc9,0xdf,0x92,0x2c,0x85,0x6a,
+   0xa6,0x25,0x1e,0x66,0x50,0x26,0x4e,0xa8,0xbd,0xda,0x88,0x1b,0x95,0xd4,0x00,0xeb,
+   0x0d,0x1c,0x9b,0x3c,0x86,0xc7,0xb2,0xdf,0xb4,0x5a,0x36,0x15,0x8e,0x04,0xd2,0x54,
+   0x79,0xd2,0x3e,0x3d,0x99,0x50,0xa6,0x12,0x4c,0x32,0xc8,0x51,0x14,0x4d,0x4b,0x0e,
+   0xbb,0x17,0x80,0x8f,0xa4,0xc4,0x99,0x72,0xd7,0x14,0x4b,0xef,0xed,0x14,0xe9,0x17,
+   0xfa,0x9b,0x5d,0x37,0xd6,0x2f,0xef,0x02,0xd6,0x71,0x0a,0xbd,0xc5,0x40,0x11,0x90,
+   0x90,0x4e,0xb4,0x4c,0x72,0x51,0x7a,0xd8,0xba,0x30,0x4d,0x8c,0xe2,0x11,0xbb,0x6d,
+   0x4b,0xbc,0x6f,0x14,0x0c,0x9f,0xfa,0x5e,0x66,0x40,0x45,0xcb,0x7d,0x1b,0x3a,0xc5,
+   0x5e,0x9c,0x1e,0xcc,0xbd,0x16,0x3b,0xcf,0xfb,0x2a,0xd2,0x08,0x2a,0xf8,0x3d,0x46,
+   0x93,0x90,0xb3,0x66,0x81,0x34,0x7f,0x6d,0x9b,0x8c,0x99,0x03,0xc5,0x27,0xa3,0xd9,
+   0xce,0x90,0x88,0x0f,0x55,0xc3,0xa1,0x60,0x53,0xc8,0x0d,0x25,0xae,0x61,0xd9,0x72,
+   0x48,0x1d,0x6c,0x61,0xd2,0x87,0xdd,0x3d,0x23,0xf5,0xde,0x93,0x39,0x4c,0x43,0x9a,
+   0xf9,0x37,0xf2,0x61,0xd7,0xf8,0xea,0x65,0xf0,0xf1,0xde,0x3f,0x05,0x57,0x83,0x81,
+   0xde,0x02,0x62,0x49,0xd4,0x32,0x7e,0x4a,0xd4,0x9f,0x40,0x7e,0xb9,0x91,0xb1,0x35,
+   0xf7,0x62,0x3f,0x65,0x9e,0x4d,0x2b,0x10,0xde,0xd4,0x77,0x64,0x0f,0x84,0xad,0x92,
+   0xe7,0xa3,0x8a,0x10,0xc1,0x14,0xeb,0x57,0xc4,0xad,0x8e,0xc2,0xc7,0x32,0xa3,0x7e,
+   0x50,0x1f,0x7c,0xbb,0x2e,0x5f,0xf5,0x18,0x22,0xea,0xec,0x9d,0xa4,0x77,0xcd,0x85,
+   0x04,0x2f,0x20,0x61,0x72,0xa7,0x0c,0x92,0x06,0x4d,0x01,0x70,0x9b,0x35,0xa1,0x27,
+   0x32,0x6e,0xb9,0x78,0xe0,0xaa,0x5f,0x91,0xa6,0x51,0xe3,0x63,0xf8,0x97,0x2f,0x60,
+   0xd9,0xfb,0x15,0xe5,0x59,0xcf,0x31,0x3c,0x61,0xc7,0xb5,0x61,0x2a,0x6b,0xdd,0xd1,
+   0x09,0x70,0xc0,0xcf,0x94,0x7a,0xcc,0x31,0x94,0xb1,0xa2,0xf6,0x95,0xc0,0x38,0x3d,
+   0xef,0x19,0x30,0x70,0xdd,0x62,0x32,0x8f,0x7c,0x30,0xb9,0x18,0xf8,0xe7,0x8f,0x0a,
+   0xaa,0xb6,0x00,0x86,0xf2,0xe0,0x30,0x5f,0xa2,0xe8,0x00,0x8e,0x05,0xa0,0x22,0x18,
+   0x9f,0x83,0xd4,0x3a,0x85,0x10,0xb9,0x51,0x8d,0x07,0xf0,0xb3,0xcd,0x9b,0x55,0xa1,
+   0x14,0xce,0x0f,0xb2,0xcf,0xb8,0xce,0x2d,0xe6,0xe8,0x35,0x32,0x1f,0x22,0xb5,0xec,
+   0xd0,0xb9,0x72,0xa8,0xb4,0x97
+   //,0x6e,0x0a,0x47,0xcd,0x5a,0xf0,0xdc,0xeb,0xfd,0x46,
+   //0xe5,0x6e,0x83,0xe6,0x1a,0xcc,0x4a,0x8b,0xa5,0x28,0x9e,0x50,0x48,0xa9,0xa2,0x6b,
+ };
+ 
+ // this is made of the last iteration of the rf_table (18th transformation)
+ const uint8_t rf256_iv[32] = {
+   0x78,0xe9,0x90,0xd3,0xb3,0xc8,0x9b,0x7b,0x0a,0xc4,0x86,0x6e,0x4e,0x38,0xb3,0x6b,
+   0x33,0x68,0x7c,0xed,0x73,0x35,0x4b,0x0a,0x97,0x25,0x4c,0x77,0x7a,0xaa,0x61,0x1b
+ };
+ 
+ // crc32 lookup tables
+ const uint32_t rf_crc32_table[256] = {
+   /* 0x00 */ 0x00000000, 0x77073096, 0xee0e612c, 0x990951ba,
+   /* 0x04 */ 0x076dc419, 0x706af48f, 0xe963a535, 0x9e6495a3,
+   /* 0x08 */ 0x0edb8832, 0x79dcb8a4, 0xe0d5e91e, 0x97d2d988,
+   /* 0x0c */ 0x09b64c2b, 0x7eb17cbd, 0xe7b82d07, 0x90bf1d91,
+   /* 0x10 */ 0x1db71064, 0x6ab020f2, 0xf3b97148, 0x84be41de,
+   /* 0x14 */ 0x1adad47d, 0x6ddde4eb, 0xf4d4b551, 0x83d385c7,
+   /* 0x18 */ 0x136c9856, 0x646ba8c0, 0xfd62f97a, 0x8a65c9ec,
+   /* 0x1c */ 0x14015c4f, 0x63066cd9, 0xfa0f3d63, 0x8d080df5,
+   /* 0x20 */ 0x3b6e20c8, 0x4c69105e, 0xd56041e4, 0xa2677172,
+   /* 0x24 */ 0x3c03e4d1, 0x4b04d447, 0xd20d85fd, 0xa50ab56b,
+   /* 0x28 */ 0x35b5a8fa, 0x42b2986c, 0xdbbbc9d6, 0xacbcf940,
+   /* 0x2c */ 0x32d86ce3, 0x45df5c75, 0xdcd60dcf, 0xabd13d59,
+   /* 0x30 */ 0x26d930ac, 0x51de003a, 0xc8d75180, 0xbfd06116,
+   /* 0x34 */ 0x21b4f4b5, 0x56b3c423, 0xcfba9599, 0xb8bda50f,
+   /* 0x38 */ 0x2802b89e, 0x5f058808, 0xc60cd9b2, 0xb10be924,
+   /* 0x3c */ 0x2f6f7c87, 0x58684c11, 0xc1611dab, 0xb6662d3d,
+   /* 0x40 */ 0x76dc4190, 0x01db7106, 0x98d220bc, 0xefd5102a,
+   /* 0x44 */ 0x71b18589, 0x06b6b51f, 0x9fbfe4a5, 0xe8b8d433,
+   /* 0x48 */ 0x7807c9a2, 0x0f00f934, 0x9609a88e, 0xe10e9818,
+   /* 0x4c */ 0x7f6a0dbb, 0x086d3d2d, 0x91646c97, 0xe6635c01,
+   /* 0x50 */ 0x6b6b51f4, 0x1c6c6162, 0x856530d8, 0xf262004e,
+   /* 0x54 */ 0x6c0695ed, 0x1b01a57b, 0x8208f4c1, 0xf50fc457,
+   /* 0x58 */ 0x65b0d9c6, 0x12b7e950, 0x8bbeb8ea, 0xfcb9887c,
+   /* 0x5c */ 0x62dd1ddf, 0x15da2d49, 0x8cd37cf3, 0xfbd44c65,
+   /* 0x60 */ 0x4db26158, 0x3ab551ce, 0xa3bc0074, 0xd4bb30e2,
+   /* 0x64 */ 0x4adfa541, 0x3dd895d7, 0xa4d1c46d, 0xd3d6f4fb,
+   /* 0x68 */ 0x4369e96a, 0x346ed9fc, 0xad678846, 0xda60b8d0,
+   /* 0x6c */ 0x44042d73, 0x33031de5, 0xaa0a4c5f, 0xdd0d7cc9,
+   /* 0x70 */ 0x5005713c, 0x270241aa, 0xbe0b1010, 0xc90c2086,
+   /* 0x74 */ 0x5768b525, 0x206f85b3, 0xb966d409, 0xce61e49f,
+   /* 0x78 */ 0x5edef90e, 0x29d9c998, 0xb0d09822, 0xc7d7a8b4,
+   /* 0x7c */ 0x59b33d17, 0x2eb40d81, 0xb7bd5c3b, 0xc0ba6cad,
+   /* 0x80 */ 0xedb88320, 0x9abfb3b6, 0x03b6e20c, 0x74b1d29a,
+   /* 0x84 */ 0xead54739, 0x9dd277af, 0x04db2615, 0x73dc1683,
+   /* 0x88 */ 0xe3630b12, 0x94643b84, 0x0d6d6a3e, 0x7a6a5aa8,
+   /* 0x8c */ 0xe40ecf0b, 0x9309ff9d, 0x0a00ae27, 0x7d079eb1,
+   /* 0x90 */ 0xf00f9344, 0x8708a3d2, 0x1e01f268, 0x6906c2fe,
+   /* 0x94 */ 0xf762575d, 0x806567cb, 0x196c3671, 0x6e6b06e7,
+   /* 0x98 */ 0xfed41b76, 0x89d32be0, 0x10da7a5a, 0x67dd4acc,
+   /* 0x9c */ 0xf9b9df6f, 0x8ebeeff9, 0x17b7be43, 0x60b08ed5,
+   /* 0xa0 */ 0xd6d6a3e8, 0xa1d1937e, 0x38d8c2c4, 0x4fdff252,
+   /* 0xa4 */ 0xd1bb67f1, 0xa6bc5767, 0x3fb506dd, 0x48b2364b,
+   /* 0xa8 */ 0xd80d2bda, 0xaf0a1b4c, 0x36034af6, 0x41047a60,
+   /* 0xac */ 0xdf60efc3, 0xa867df55, 0x316e8eef, 0x4669be79,
+   /* 0xb0 */ 0xcb61b38c, 0xbc66831a, 0x256fd2a0, 0x5268e236,
+   /* 0xb4 */ 0xcc0c7795, 0xbb0b4703, 0x220216b9, 0x5505262f,
+   /* 0xb8 */ 0xc5ba3bbe, 0xb2bd0b28, 0x2bb45a92, 0x5cb36a04,
+   /* 0xbc */ 0xc2d7ffa7, 0xb5d0cf31, 0x2cd99e8b, 0x5bdeae1d,
+   /* 0xc0 */ 0x9b64c2b0, 0xec63f226, 0x756aa39c, 0x026d930a,
+   /* 0xc4 */ 0x9c0906a9, 0xeb0e363f, 0x72076785, 0x05005713,
+   /* 0xc8 */ 0x95bf4a82, 0xe2b87a14, 0x7bb12bae, 0x0cb61b38,
+   /* 0xcc */ 0x92d28e9b, 0xe5d5be0d, 0x7cdcefb7, 0x0bdbdf21,
+   /* 0xd0 */ 0x86d3d2d4, 0xf1d4e242, 0x68ddb3f8, 0x1fda836e,
+   /* 0xd4 */ 0x81be16cd, 0xf6b9265b, 0x6fb077e1, 0x18b74777,
+   /* 0xd8 */ 0x88085ae6, 0xff0f6a70, 0x66063bca, 0x11010b5c,
+   /* 0xdc */ 0x8f659eff, 0xf862ae69, 0x616bffd3, 0x166ccf45,
+   /* 0xe0 */ 0xa00ae278, 0xd70dd2ee, 0x4e048354, 0x3903b3c2,
+   /* 0xe4 */ 0xa7672661, 0xd06016f7, 0x4969474d, 0x3e6e77db,
+   /* 0xe8 */ 0xaed16a4a, 0xd9d65adc, 0x40df0b66, 0x37d83bf0,
+   /* 0xec */ 0xa9bcae53, 0xdebb9ec5, 0x47b2cf7f, 0x30b5ffe9,
+   /* 0xf0 */ 0xbdbdf21c, 0xcabac28a, 0x53b39330, 0x24b4a3a6,
+   /* 0xf4 */ 0xbad03605, 0xcdd70693, 0x54de5729, 0x23d967bf,
+   /* 0xf8 */ 0xb3667a2e, 0xc4614ab8, 0x5d681b02, 0x2a6f2b94,
+   /* 0xfc */ 0xb40bbe37, 0xc30c8ea1, 0x5a05df1b, 0x2d02ef8d,
+ };
+ 
+ // compute the crc32 of 32-bit message _msg_ from previous crc _crc_.
+ // build with -mcpu=cortex-a53+crc to enable native CRC instruction on ARM
+ static inline uint32_t rf_crc32_32(uint32_t crc, uint32_t msg) {
+ #if defined(__aarch64__) && defined(__ARM_FEATURE_CRC32)
+   __asm__("crc32w %w0,%w0,%w1\n":"+r"(crc):"r"(msg));
+ #else
+   crc=crc^msg;
+   crc=rf_crc32_table[crc&0xff]^(crc>>8);
+   crc=rf_crc32_table[crc&0xff]^(crc>>8);
+   crc=rf_crc32_table[crc&0xff]^(crc>>8);
+   crc=rf_crc32_table[crc&0xff]^(crc>>8);
+ #endif
+   return crc;
+ }
+ 
+ static inline uint32_t rf_crc32_24(uint32_t crc, uint32_t msg) {
+ #if defined(__aarch64__) && defined(__ARM_FEATURE_CRC32)
+   __asm__("crc32b %w0,%w0,%w1\n":"+r"(crc):"r"(msg));
+   __asm__("crc32h %w0,%w0,%w1\n":"+r"(crc):"r"(msg>>8));
+ #else
+   crc=crc^msg;
+   crc=rf_crc32_table[crc&0xff]^(crc>>8);
+   crc=rf_crc32_table[crc&0xff]^(crc>>8);
+   crc=rf_crc32_table[crc&0xff]^(crc>>8);
+ #endif
+   return crc;
+ }
+ 
+ static inline uint32_t rf_crc32_16(uint32_t crc, uint32_t msg) {
+ #if defined(__aarch64__) && defined(__ARM_FEATURE_CRC32)
+   __asm__("crc32h %w0,%w0,%w1\n":"+r"(crc):"r"(msg));
+ #else
+   crc=crc^msg;
+   crc=rf_crc32_table[crc&0xff]^(crc>>8);
+   crc=rf_crc32_table[crc&0xff]^(crc>>8);
+ #endif
+   return crc;
+ }
+ 
+ static inline uint32_t rf_crc32_8(uint32_t crc, uint32_t msg) {
+ #if defined(__aarch64__) && defined(__ARM_FEATURE_CRC32)
+   __asm__("crc32b %w0,%w0,%w1\n":"+r"(crc):"r"(msg));
+ #else
+   crc=crc^msg;
+   crc=rf_crc32_table[crc&0xff]^(crc>>8);
+ #endif
+   return crc;
+ }
+ 
+ // add to _msg_ its own crc32. use -mcpu=cortex-a53+crc to enable native CRC
+ // instruction on ARM.
+ static inline uint64_t rf_add64_crc32(uint64_t msg) {
+   uint64_t crc=0;
+ #if defined(__aarch64__) && defined(__ARM_FEATURE_CRC32)
+   __asm__("crc32x %w0,%w0,%x1\n":"+r"(crc):"r"(msg));
+ #else
+   crc^=(uint32_t)msg;
+   crc=rf_crc32_table[crc&0xff]^(crc>>8);
+   crc=rf_crc32_table[crc&0xff]^(crc>>8);
+   crc=rf_crc32_table[crc&0xff]^(crc>>8);
+   crc=rf_crc32_table[crc&0xff]^(crc>>8);
+ 
+   crc^=msg>>32;
+   crc=rf_crc32_table[crc&0xff]^(crc>>8);
+   crc=rf_crc32_table[crc&0xff]^(crc>>8);
+   crc=rf_crc32_table[crc&0xff]^(crc>>8);
+   crc=rf_crc32_table[crc&0xff]^(crc>>8);
+ #endif
+   return msg+crc;
+ }
+ 
+ // mix the current state with the crc and return the new crc
+ static inline uint32_t rf_crc32x4(rf_u32 *state, uint32_t crc) {
+   crc=state[0]=rf_crc32_32(crc, state[0]);
+   crc=state[1]=rf_crc32_32(crc, state[1]);
+   crc=state[2]=rf_crc32_32(crc, state[2]);
+   crc=state[3]=rf_crc32_32(crc, state[3]);
+   return crc;
+ }
+ 
+ // read 64 bit from possibly unaligned memory address _p_ in little endian mode
+ static inline uint64_t rf_memr64(const uint8_t *p) {
+ #ifdef RF_UNALIGNED_LE64
+   return *(uint64_t *)p;
+ #else
+   uint64_t ret;
+   int byte;
+   for (ret=byte=0; byte<8; byte++)
+     ret+=(uint64_t)p[byte]<<(byte*8);
+   return ret;
+ #endif
+ }
+ 
+ // return rainforest lower word entry for index
+ static inline uint64_t rf_wltable(uint8_t index) {
+   return rf_memr64(&rf_table[index]);
+ }
+ 
+ // return rainforest upper word entry for _index_
+ static inline uint64_t rf_whtable(uint8_t index) {
+   return rf_memr64(&rf_table[index*2]);
+ }
+ 
+ // rotate left vector _v_ by _bits_ bits
+ static inline uint64_t rf_rotl64(uint64_t v, uint8_t bits) {
+ #if !defined(__ARM_ARCH_8A) && !defined(__AARCH64EL__) && !defined(x86_64)
+   bits&=63;
+ #endif
+   return (v<<bits)|(v>>(64-bits));
+ }
+ 
+ // rotate right vector _v_ by _bits_ bits
+ static inline uint64_t rf_rotr64(uint64_t v, uint8_t bits) {
+ #if !defined(__ARM_ARCH_8A) && !defined(__AARCH64EL__) && !defined(x86_64)
+   bits&=63;
+ #endif
+   return (v>>bits)|(v<<(64-bits));
+ }
+ 
+ // reverse all bytes in the word _v_
+ static inline uint64_t rf_bswap64(uint64_t v) {
+ #if defined(__x86_64__)
+   __asm__("bswap %0":"+r"(v));
+ #elif defined(__aarch64__)
+   __asm__("rev %0,%0\n":"+r"(v));
+ #else
+   v=((v&0xff00ff00ff00ff00ULL)>>8)|((v&0x00ff00ff00ff00ffULL)<<8);
+   v=((v&0xffff0000ffff0000ULL)>>16)|((v&0x0000ffff0000ffffULL)<<16);
+   v=(v>>32)|(v<<32);
+ #endif
+   return v;
+ }
+ 
+ // lookup _old_ in _rambox_, update it and perform a substitution if a matching
+ // value is found.
+ static inline uint32_t rf_rambox(uint64_t *rambox, uint64_t old) {
+   uint64_t *p;
+   int loops;
+ 
+   for (loops=0; loops<RAMBOX_LOOPS; loops++) {
+     old=rf_add64_crc32(old);
+     p=&rambox[old&(RAMBOX_SIZE-1)];
+     old+=rf_rotr64(*p, old/RAMBOX_SIZE);
+     // 0x80 below gives a write ratio of 50%
+     if ((old>>56)<0x80)
+       *p = old;
+   }
+   return old;
+ }
+ 
+ // write (_x_,_y_) at cell _cell_ for offset _ofs_
+ static inline void rf_w128(uint64_t *cell, ulong ofs, uint64_t x, uint64_t y) {
+ #if defined(__ARM_ARCH_8A) || defined(__AARCH64EL__)
+   // 128 bit at once is faster when exactly two parallelizable instructions are
+   // used between two calls to keep the pipe full.
+   __asm__ volatile("stp %0, %1, [%2,#%3]\n\t"
+                : /* no output */
+                : "r"(x), "r"(y), "r" (cell), "I" (ofs*8));
+ #else
+   cell[ofs+0] = x;
+   cell[ofs+1] = y;
+ #endif
+ }
+ 
+ // initialize the ram box
+ static __attribute__((noinline)) void rf_raminit(uint64_t *rambox) {
+   uint64_t pat1 = 0x0123456789ABCDEFULL;
+   uint64_t pat2 = 0xFEDCBA9876543210ULL;
+   uint64_t pat3;
+   uint32_t pos;
+ 
+   // Note: no need to mask the higher bits on armv8 nor x86 :
+   //
+   // From ARMv8's ref manual :
+   //     The register that is specified for a shift can be 32-bit or
+   //     64-bit. The amount to be shifted can be specified either as
+   //     an immediate, that is up to register size minus one, or by
+   //     a register where the value is taken only from the bottom five
+   //     (modulo-32) or six (modulo-64) bits.
+   //
+   // Here we rotate pat2 by pat1's bits and put it into pat1, and in
+   // parallel we rotate pat1 by pat2's bits and put it into pat2. Thus
+   // the two data blocks are exchanged in addition to being rotated.
+   // What is stored each time is the previous and the rotated blocks,
+   // which only requires one rotate and a register rename.
+ 
+   for (pos = 0; pos < RAMBOX_SIZE; pos += 16) {
+     pat3 = pat1;
+     pat1 = rf_rotr64(pat2, pat3) + 0x111;
+     rf_w128(rambox + pos, 0, pat1, pat3);
+ 
+     pat3 = pat2;
+     pat2 = rf_rotr64(pat1, pat3) + 0x222;
+     rf_w128(rambox + pos, 2, pat2, pat3);
+ 
+     pat3 = pat1;
+     pat1 = rf_rotr64(pat2, pat3) + 0x333;
+     rf_w128(rambox + pos, 4, pat1, pat3);
+ 
+     pat3 = pat2;
+     pat2 = rf_rotr64(pat1, pat3) + 0x444;
+     rf_w128(rambox + pos, 6, pat2, pat3);
+ 
+     pat3 = pat1;
+     pat1 = rf_rotr64(pat2, pat3) + 0x555;
+     rf_w128(rambox + pos, 8, pat1, pat3);
+ 
+     pat3 = pat2;
+     pat2 = rf_rotr64(pat1, pat3) + 0x666;
+     rf_w128(rambox + pos, 10, pat2, pat3);
+ 
+     pat3 = pat1;
+     pat1 = rf_rotr64(pat2, pat3) + 0x777;
+     rf_w128(rambox + pos, 12, pat1, pat3);
+ 
+     pat3 = pat2;
+     pat2 = rf_rotr64(pat1, pat3) + 0x888;
+     rf_w128(rambox + pos, 14, pat2, pat3);
+   }
+ }
+ 
+ // exec the div/mod box. _v0_ and _v1_ must be aligned.
+ static inline void rf256_divbox(rf_u64 *v0, rf_u64 *v1) {
+   uint64_t pl, ql, ph, qh;
+ 
+   //---- low word ----    ---- high word ----
+   pl=~*v0;                ph=~*v1;
+   ql=rf_bswap64(*v0);     qh=rf_bswap64(*v1);
+ 
+   if (!pl||!ql)   { pl=ql=0; }
+   else if (pl>ql) { uint64_t p=pl; pl=p/ql; ql=p%ql; }
+   else            { uint64_t p=pl; pl=ql/p; ql=ql%p; }
+ 
+   if (!ph||!qh)   { ph=qh=0; }
+   else if (ph>qh) { uint64_t p=ph; ph=p/qh; qh=p%qh; }
+   else            { uint64_t p=ph; ph=qh/p; qh=qh%p; }
+ 
+   pl+=qh;                 ph+=ql;
+   *v0-=pl;                *v1-=ph;
+ }
+ 
+ // exec the rotation/add box. _v0_ and _v1_ must be aligned.
+ static inline void rf256_rotbox(rf_u64 *v0, rf_u64 *v1, uint8_t b0, uint8_t b1) {
+   uint64_t l, h;
+ 
+   //---- low word ----    ---- high word ----
+   l=*v0;                  h=*v1;
+   l=rf_rotr64(l,b0);      h=rf_rotl64(h,b1);
+   l+=rf_wltable(b0);      h+=rf_whtable(b1);
+   b0=l;                   b1=h;
+   l=rf_rotl64(l,b1);      h=rf_rotr64(h,b0);
+   b0=l;                   b1=h;
+   l=rf_rotr64(l,b1);      h=rf_rotl64(h,b0);
+   *v0=l;                  *v1=h;
+ }
+ 
+ // mix the current state with the current crc
+ static inline uint32_t rf256_scramble(rf256_ctx_t *ctx) {
+   return ctx->crc=rf_crc32x4(ctx->hash.d, ctx->crc);
+ }
+ 
+ // mix the state with the crc and the pending text, and update the crc
+ static inline void rf256_inject(rf256_ctx_t *ctx) {
+   ctx->crc=
+     (ctx->len&3)==0?rf_crc32_32(rf256_scramble(ctx), ctx->word):
+     (ctx->len&3)==3?rf_crc32_24(rf256_scramble(ctx), ctx->word):
+     (ctx->len&3)==2?rf_crc32_16(rf256_scramble(ctx), ctx->word):
+                     rf_crc32_8(rf256_scramble(ctx), ctx->word);
+   ctx->word=0;
+ }
+ 
+ // rotate the hash by 32 bits. Not using streaming instructions (SSE/NEON) is
+ // faster because the compiler can follow moves an use register renames.
+ static inline void rf256_rot32x256(hash256_t *hash) {
+ #if defined(__x86_64__) || defined(__aarch64__) || defined(__ARM_ARCH_7A__)
+   uint32_t t0, t1, t2;
+ 
+   t0=hash->d[0];
+   t1=hash->d[1];
+   t2=hash->d[2];
+   hash->d[1]=t0;
+   hash->d[2]=t1;
+ 
+   t0=hash->d[3];
+   t1=hash->d[4];
+   hash->d[3]=t2;
+   hash->d[4]=t0;
+ 
+   t2=hash->d[5];
+   t0=hash->d[6];
+   hash->d[5]=t1;
+   hash->d[6]=t2;
+ 
+   t1=hash->d[7];
+   hash->d[7]=t0;
+   hash->d[0]=t1;
+ #else
+   uint32_t tmp=hash->d[7];
+ 
+   memmove(&hash->d[1], &hash->d[0], 28);
+   hash->d[0]=tmp;
+ #endif
+ }
+ 
+ // encrypt the first 128 bits of the hash using the last 128 bits as the key
+ static inline void rf256_aesenc(rf256_ctx_t *ctx) {
+   aes2r_encrypt((uint8_t *)ctx->hash.b, (uint8_t *)ctx->hash.b+16);
+ }
+ 
+ // each new round consumes exactly 32 bits of text at once and perturbates
+ // 128 bits of output, 96 of which overlap with the previous round, and 32
+ // of which are new. With 5 rounds or more each output bit depends on every
+ // input bit.
+ static inline void rf256_one_round(rf256_ctx_t *ctx) {
+   uint64_t carry;
+ 
+   rf256_rot32x256(&ctx->hash);
+ 
+   carry=((uint64_t)ctx->len << 32) + ctx->crc;
+   rf256_scramble(ctx);
+   rf256_divbox(ctx->hash.q, ctx->hash.q+1);
+   rf256_scramble(ctx);
+ 
+   carry=rf_rambox(ctx->rambox, carry);
+   rf256_rotbox(ctx->hash.q, ctx->hash.q+1, carry, carry>>56);
+   rf256_scramble(ctx);
+   rf256_divbox(ctx->hash.q, ctx->hash.q+1);
+   rf256_scramble(ctx);
+   rf256_divbox(ctx->hash.q, ctx->hash.q+1);
+   rf256_scramble(ctx);
+ 
+   carry=rf_rambox(ctx->rambox, carry);
+   rf256_rotbox(ctx->hash.q, ctx->hash.q+1, carry>>8, carry>>48);
+   rf256_scramble(ctx);
+   rf256_divbox(ctx->hash.q, ctx->hash.q+1);
+   rf256_scramble(ctx);
+   rf256_divbox(ctx->hash.q, ctx->hash.q+1);
+   rf256_scramble(ctx);
+ 
+   carry=rf_rambox(ctx->rambox, carry);
+   rf256_rotbox(ctx->hash.q, ctx->hash.q+1, carry>>16, carry>>40);
+   rf256_scramble(ctx);
+   rf256_divbox(ctx->hash.q, ctx->hash.q+1);
+   rf256_scramble(ctx);
+   rf256_divbox(ctx->hash.q, ctx->hash.q+1);
+   rf256_scramble(ctx);
+ 
+   carry=rf_rambox(ctx->rambox,carry);
+   rf256_rotbox(ctx->hash.q, ctx->hash.q+1, carry>>24, carry>>32);
+   rf256_scramble(ctx);
+   rf256_divbox(ctx->hash.q, ctx->hash.q+1);
+   rf256_inject(ctx);
+   rf256_aesenc(ctx);
+   rf256_scramble(ctx);
+ }
+ 
+ // initialize the hash state
+ void rf256_init(rf256_ctx_t *ctx) {
+   rf_raminit(ctx->rambox);
+   memcpy(ctx->hash.b, rf256_iv, sizeof(ctx->hash.b));
+   ctx->crc=RF256_INIT_CRC;
+   ctx->word=ctx->len=0;
+ }
+ 
+ // update the hash context _ctx_ with _len_ bytes from message _msg_
+ void rf256_update(rf256_ctx_t *ctx, const void *msg, size_t len) {
+   while (len > 0) {
+ #ifdef RF_UNALIGNED_LE32
+     if (!(ctx->len&3) && len>=4) {
+       ctx->word=*(uint32_t *)msg;
+       ctx->len+=4;
+       rf256_one_round(ctx);
+       msg+=4;
+       len-=4;
+       continue;
+     }
+ #endif
+     ctx->word|=((uint32_t)*(uint8_t *)msg++)<<(8*(ctx->len++&3));
+     len--;
+     if (!(ctx->len&3))
+       rf256_one_round(ctx);
+   }
+ }
+ 
+ // finalize the hash and copy the result into _out_ if not null (256 bits)
+ void rf256_final(void *out, rf256_ctx_t *ctx) {
+   uint32_t pad;
+ 
+   if (ctx->len&3)
+     rf256_one_round(ctx);
+ 
+   // always work on at least 256 bits of input
+   for (pad=0; pad+ctx->len < 32;pad+=4)
+     rf256_one_round(ctx);
+ 
+   // always run 4 extra rounds to complete the last 128 bits
+   rf256_one_round(ctx);
+   rf256_one_round(ctx);
+   rf256_one_round(ctx);
+   rf256_one_round(ctx);
+   if (out)
+     memcpy(out, ctx->hash.b, 32);
+ }
+ 
+ // hash _len_ bytes from _in_ into _out_
+ void rf256_hash(void *out, const void *in, size_t len) {
+   rf256_ctx_t ctx;
+   rf256_init(&ctx);
+   rf256_update(&ctx, in, len);
+   rf256_final(out, &ctx);
+ }
+ 
+ // hash _len_ bytes from _in_ into _out_, using _seed_
+ void rf256_hash2(void *out, const void *in, size_t len, uint32_t seed) {
+   rf256_ctx_t ctx;
+   rf256_init(&ctx);
+   ctx.crc = seed;
+   rf256_update(&ctx, in, len);
+   rf256_final(out, &ctx);
+ }
+ 
+ #ifdef RAINFOREST_TEST
+ static void print256(const uint8_t *b, const char *tag) {
+   printf("%s: %02x%02x%02x%02x%02x%02x%02x%02x%02x%02x%02x%02x%02x%02x%02x%02x"
+ 	 ".%02x%02x%02x%02x%02x%02x%02x%02x%02x%02x%02x%02x%02x%02x%02x%02x\n",
+          tag,
+          b[0],  b[1],  b[2],  b[3],  b[4],  b[5],  b[6],  b[7],
+          b[8],  b[9],  b[10], b[11], b[12], b[13], b[14], b[15],
+          b[16], b[17], b[18], b[19], b[20], b[21], b[22], b[23],
+          b[24], b[25], b[26], b[27], b[28], b[29], b[30], b[31]);
+ }
+ 
+ int main(int argc, char **argv) {
+   unsigned int loops;
+   uint8_t msg[80];
+   unsigned char md[32];
+ 
+   if (argc>1) {
+     rf256_ctx_t ctx;
+     int arg;
+ 
+     rf256_init(&ctx);
+     for (arg=1; arg<argc; arg++)
+       rf256_update(&ctx, (uint8_t*)argv[arg], strlen(argv[arg]));
+     rf256_final(md, &ctx);
+     print256(md, "3step(argv1)   ");
+ 
+     rf256_hash(md, (uint8_t*)argv[1], strlen(argv[1]));
+     print256(md, "1step(argv1)   ");
+ 
+     rf256_hash(md, (uint8_t*)argv[1], strlen(argv[1])+1);
+     print256(md, "1step(argv1+\\0)");
+     return 0;
+   }
+ 
+   for (loops=0;loops<80;loops++)
+     msg[loops]=loops;
+ 
+   for (loops=0; loops<100000/*0*/; loops++) {
+     if (!(loops&0x3ffff))
+       printf("%u\n", loops);
+     rf256_hash(md, msg, sizeof(msg));
+     memcpy(msg, md, 32);
+   }
+   printf("%u\n", loops);
+   print256(md, "md");
+   exit(0);
+ }
+ #endif
*** rainforest.h
--- rainforest.h
***************
*** 0 ****
--- 1,69 ----
+ // RainForest hash algorithm
+ // Author: Bill Schneider
+ // Date: Feb 13th, 2018
+ //
+ // RainForest uses native integer operations which are extremely fast on
+ // modern 64-bit processors, significantly slower on 32-bit processors such
+ // as GPUs, and extremely slow if at all implementable on FPGAs and ASICs.
+ // It makes an intensive use of the L1 cache to maintain a heavy intermediary
+ // state favoring modern CPUs compared to GPUs (small L1 cache shared by many
+ // shaders) or FPGAs (very hard to implement the required low-latency cache)
+ // when scanning ranges for nonces. The purpose is to create a fair balance
+ // between all mining equipments, from mobile phones to extreme performance
+ // GPUs and to rule out farming factories relying on ASICs and FPGAs. The
+ // CRC32 instruction is used a lot as it is extremely fast on low-power ARM
+ // chips and allows such devices to rival high-end PCs mining performance.
+ //
+ // Tests on various devices have shown the following performance :
+ // +--------------------------------------------------------------------------+
+ // | CPU/GPU       Clock Threads Full hash  Nonce scan  Watts   Cost          |
+ // |               (MHz)         (80 bytes) (4 bytes)   total                 |
+ // | Core i7-6700k  4000      8   390 kH/s  1642 kH/s     200  ~$350+PC       |
+ // | Radeon RX560   1300   1024  1100 kH/s  1650 kH/s     300  ~$180+PC       |
+ // | RK3368 (8*A53) 1416      8   534 kH/s  1582 kH/s       6   $60 (Geekbox) |
+ // +--------------------------------------------------------------------------+
+ //
+ // Build instructions on Ubuntu 16.04 :
+ //   - on x86:   use gcc -march=native or -maes to enable AES-NI
+ //   - on ARMv8: use gcc -march=native or -march=armv8-a+crypto+crc to enable
+ //               CRC32 and AES extensions.
+ //
+ // Note: always use the same options to build all files!
+ 
+ #ifndef RAINFOREST
+ #define RAINFOREST
+ 
+ #include <stdint.h>
+ 
+ // this seems necessary only for gcc, otherwise hash is bogus
+ typedef __attribute__((may_alias)) uint8_t  rf_u8;
+ typedef __attribute__((may_alias)) uint16_t rf_u16;
+ typedef __attribute__((may_alias)) uint32_t rf_u32;
+ typedef __attribute__((may_alias)) uint64_t rf_u64;
+ 
+ // 2048 entries for the rambox => 16kB
+ #define RAMBOX_SIZE 2048
+ #define RAMBOX_LOOPS 4
+ 
+ typedef union {
+   rf_u8  b[32];
+   rf_u16 w[16];
+   rf_u32 d[8];
+   rf_u64 q[4];
+ } hash256_t;
+ 
+ typedef struct __attribute__((aligned(16))) rf_ctx {
+   uint64_t rambox[RAMBOX_SIZE];
+   hash256_t hash;
+   uint32_t crc;
+   uint32_t word;  // LE pending message
+   uint32_t len;   // total message length
+ } rf256_ctx_t;
+ 
+ void rf256_init(rf256_ctx_t *ctx);
+ void rf256_update(rf256_ctx_t *ctx, const void *msg, size_t len);
+ void rf256_final(void *out, rf256_ctx_t *ctx);
+ void rf256_hash(void *out, const void *in, size_t len);
+ void rf256_hash2(void *out, const void *in, size_t len, uint32_t seed);
+ 
+ #endif
